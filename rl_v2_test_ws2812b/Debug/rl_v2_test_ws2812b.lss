
rl_v2_test_ws2812b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00803c00  000016bc  00001750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00803c38  00803c38  00001788  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000578  00000000  00000000  000017f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007705  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a27  00000000  00000000  00009475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002aed  00000000  00000000  0000be9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bf8  00000000  00000000  0000e98c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002dec  00000000  00000000  0000f584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002650  00000000  00000000  00012370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  000149c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_7>
      20:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_8>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__vector_25>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	1c e3       	ldi	r17, 0x3C	; 60
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	bc e3       	ldi	r27, 0x3C	; 60
      8e:	ec eb       	ldi	r30, 0xBC	; 188
      90:	f6 e1       	ldi	r31, 0x16	; 22
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 33       	cpi	r26, 0x38	; 56
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2c e3       	ldi	r18, 0x3C	; 60
      a0:	a8 e3       	ldi	r26, 0x38	; 56
      a2:	bc e3       	ldi	r27, 0x3C	; 60
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ae 37       	cpi	r26, 0x7E	; 126
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
      b2:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      ba:	0e 94 cf 00 	call	0x19e	; 0x19e <system_init>
      be:	08 95       	ret

000000c0 <main>:
#define DEGREE_SPACING 43

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
      c0:	0e 94 5d 00 	call	0xba	; 0xba <atmel_start_init>
	ENABLE_INTERRUPTS();
      c4:	78 94       	sei
	RTC_0_enable_heartbeat();
      c6:	0e 94 19 03 	call	0x632	; 0x632 <RTC_0_enable_heartbeat>
	//PORTA.DIRSET |= 1 << 2;
	
	//WS2812_set_type(WS2812_GRB);
	//WS2812_set_length(NUMBER_GROUPS * LEDS_PER_GROUP);
	//WS2812_set_pin(&PORTA.OUT, PIN2_bp);
	WS2812_init(WS2812_GRB, NUMBER_GROUPS * LEDS_PER_GROUP, &PORTA.OUT, PIN2_bp);
      ca:	22 e0       	ldi	r18, 0x02	; 2
      cc:	44 e0       	ldi	r20, 0x04	; 4
      ce:	54 e0       	ldi	r21, 0x04	; 4
      d0:	68 e1       	ldi	r22, 0x18	; 24
      d2:	70 e0       	ldi	r23, 0x00	; 0
      d4:	82 e5       	ldi	r24, 0x52	; 82
      d6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <WS2812_init>
	
	/* Replace with your application code */
	while (1) {
		ws2812_run_all_tests(NUMBER_GROUPS, LEDS_PER_GROUP, DEGREE_SPACING);
      da:	4b e2       	ldi	r20, 0x2B	; 43
      dc:	64 e0       	ldi	r22, 0x04	; 4
      de:	86 e0       	ldi	r24, 0x06	; 6
      e0:	0e 94 4d 08 	call	0x109a	; 0x109a <ws2812_run_all_tests>
      e4:	fa cf       	rjmp	.-12     	; 0xda <main+0x1a>

000000e6 <ADC_0_init>:

	// ADC0.CALIB = ADC_DUTYCYC_DUTY50_gc; /* 50% Duty cycle */

	// ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc; /* 1 ADC sample */

	ADC0.CTRLC = ADC_PRESC_DIV4_gc      /* CLK_PER divided by 4 */
      e6:	e0 e0       	ldi	r30, 0x00	; 0
      e8:	f6 e0       	ldi	r31, 0x06	; 6
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	82 83       	std	Z+2, r24	; 0x02

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
      ee:	80 83       	st	Z, r24
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_10BIT_gc  /* 10-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	08 95       	ret

000000f4 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	08 95       	ret

000000f8 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
      f8:	40 e1       	ldi	r20, 0x10	; 16
      fa:	68 ed       	ldi	r22, 0xD8	; 216
      fc:	81 e6       	ldi	r24, 0x61	; 97
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <protected_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	08 95       	ret

00000108 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	08 95       	ret

0000010c <mcu_init>:

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
     10c:	e0 e1       	ldi	r30, 0x10	; 16
     10e:	f4 e0       	ldi	r31, 0x04	; 4
     110:	80 81       	ld	r24, Z
     112:	88 60       	ori	r24, 0x08	; 8
     114:	81 93       	st	Z+, r24
     116:	e8 31       	cpi	r30, 0x18	; 24
     118:	84 e0       	ldi	r24, 0x04	; 4
     11a:	f8 07       	cpc	r31, r24
     11c:	c9 f7       	brne	.-14     	; 0x110 <mcu_init+0x4>
     11e:	e0 e3       	ldi	r30, 0x30	; 48
     120:	f4 e0       	ldi	r31, 0x04	; 4
     122:	80 81       	ld	r24, Z
     124:	88 60       	ori	r24, 0x08	; 8
     126:	81 93       	st	Z+, r24
     128:	e8 33       	cpi	r30, 0x38	; 56
     12a:	84 e0       	ldi	r24, 0x04	; 4
     12c:	f8 07       	cpc	r31, r24
     12e:	c9 f7       	brne	.-14     	; 0x122 <mcu_init+0x16>
     130:	e0 e5       	ldi	r30, 0x50	; 80
     132:	f4 e0       	ldi	r31, 0x04	; 4
     134:	80 81       	ld	r24, Z
     136:	88 60       	ori	r24, 0x08	; 8
     138:	81 93       	st	Z+, r24
     13a:	e8 35       	cpi	r30, 0x58	; 88
     13c:	84 e0       	ldi	r24, 0x04	; 4
     13e:	f8 07       	cpc	r31, r24
     140:	c9 f7       	brne	.-14     	; 0x134 <mcu_init+0x28>
     142:	08 95       	ret

00000144 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     144:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     146:	e3 e3       	ldi	r30, 0x33	; 51
     148:	f4 e0       	ldi	r31, 0x04	; 4
     14a:	80 81       	ld	r24, Z
     14c:	87 7f       	andi	r24, 0xF7	; 247
     14e:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     150:	2a 98       	cbi	0x05, 2	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     152:	22 9a       	sbi	0x04, 2	; 4
	    // <true"> High
	    false);

	TX_set_dir(PORT_DIR_OUT);

	USART_0_init();
     154:	0e 94 df 03 	call	0x7be	; 0x7be <USART_0_init>
     158:	08 95       	ret

0000015a <PWM_0_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     15a:	0c 98       	cbi	0x01, 4	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     15c:	04 9a       	sbi	0x00, 4	; 0
	    // <true"> High
	    false);

	PA4_set_dir(PORT_DIR_OUT);

	PWM_0_init();
     15e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <PWM_0_init>
     162:	08 95       	ret

00000164 <I2C_0_initialization>:
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     164:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     166:	20 9a       	sbi	0x04, 0	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     168:	e0 e3       	ldi	r30, 0x30	; 48
     16a:	f4 e0       	ldi	r31, 0x04	; 4
     16c:	80 81       	ld	r24, Z
     16e:	87 7f       	andi	r24, 0xF7	; 247
     170:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     172:	80 81       	ld	r24, Z
     174:	8f 77       	andi	r24, 0x7F	; 127
     176:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     178:	80 81       	ld	r24, Z
     17a:	88 7f       	andi	r24, 0xF8	; 248
     17c:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     17e:	29 98       	cbi	0x05, 1	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     180:	21 9a       	sbi	0x04, 1	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     182:	e1 e3       	ldi	r30, 0x31	; 49
     184:	f4 e0       	ldi	r31, 0x04	; 4
     186:	80 81       	ld	r24, Z
     188:	87 7f       	andi	r24, 0xF7	; 247
     18a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     18c:	80 81       	ld	r24, Z
     18e:	8f 77       	andi	r24, 0x7F	; 127
     190:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     192:	80 81       	ld	r24, Z
     194:	88 7f       	andi	r24, 0xF8	; 248
     196:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	I2C_0_init();
     198:	0e 94 bf 02 	call	0x57e	; 0x57e <I2C_0_init>
     19c:	08 95       	ret

0000019e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     19e:	0e 94 86 00 	call	0x10c	; 0x10c <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     1a2:	09 98       	cbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     1a4:	01 9a       	sbi	0x00, 1	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     1a6:	0a 98       	cbi	0x01, 2	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     1a8:	02 9a       	sbi	0x00, 2	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     1aa:	0b 98       	cbi	0x01, 3	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     1ac:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     1ae:	0d 98       	cbi	0x01, 5	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     1b0:	05 9a       	sbi	0x00, 5	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     1b2:	0e 98       	cbi	0x01, 6	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     1b4:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     1b6:	0f 98       	cbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     1b8:	07 9a       	sbi	0x00, 7	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     1ba:	2c 98       	cbi	0x05, 4	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     1bc:	24 9a       	sbi	0x04, 4	; 4
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     1be:	25 98       	cbi	0x04, 5	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     1c0:	e5 e3       	ldi	r30, 0x35	; 53
     1c2:	f4 e0       	ldi	r31, 0x04	; 4
     1c4:	80 81       	ld	r24, Z
     1c6:	87 7f       	andi	r24, 0xF7	; 247
     1c8:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     1ca:	43 98       	cbi	0x08, 3	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     1cc:	e3 e5       	ldi	r30, 0x53	; 83
     1ce:	f4 e0       	ldi	r31, 0x04	; 4
     1d0:	80 81       	ld	r24, Z
     1d2:	87 7f       	andi	r24, 0xF7	; 247
     1d4:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	CLKCTRL_init();
     1d6:	0e 94 7c 00 	call	0xf8	; 0xf8 <CLKCTRL_init>

	RTC_0_init();
     1da:	0e 94 0a 03 	call	0x614	; 0x614 <RTC_0_init>

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
     1de:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_0_init>

	RTC_0_init();

	ADC_0_initialization();

	USART_0_initialization();
     1e2:	0e 94 a2 00 	call	0x144	; 0x144 <USART_0_initialization>

	WDT_0_init();
     1e6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <WDT_0_init>

	PWM_0_initialization();
     1ea:	0e 94 ad 00 	call	0x15a	; 0x15a <PWM_0_initialization>

	CPUINT_init();
     1ee:	0e 94 84 00 	call	0x108	; 0x108 <CPUINT_init>

	SLPCTRL_init();
     1f2:	0e 94 a3 03 	call	0x746	; 0x746 <SLPCTRL_init>

	I2C_0_initialization();
     1f6:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_0_initialization>

	BOD_init();
     1fa:	0e 94 7a 00 	call	0xf4	; 0xf4 <BOD_init>
	
	TIMER_0_init();
     1fe:	0e 94 a5 03 	call	0x74a	; 0x74a <TIMER_0_init>
     202:	08 95       	ret

00000204 <I2C_0_do_I2C_RESET>:
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
}
     204:	e0 e1       	ldi	r30, 0x10	; 16
     206:	f8 e0       	ldi	r31, 0x08	; 8
     208:	84 81       	ldd	r24, Z+4	; 0x04
     20a:	88 60       	ori	r24, 0x08	; 8
     20c:	84 83       	std	Z+4, r24	; 0x04
     20e:	85 81       	ldd	r24, Z+5	; 0x05
     210:	81 60       	ori	r24, 0x01	; 1
     212:	85 83       	std	Z+5, r24	; 0x05
     214:	e8 e3       	ldi	r30, 0x38	; 56
     216:	fc e3       	ldi	r31, 0x3C	; 60
     218:	80 81       	ld	r24, Z
     21a:	8e 7f       	andi	r24, 0xFE	; 254
     21c:	80 83       	st	Z, r24
     21e:	13 86       	std	Z+11, r1	; 0x0b
     220:	8e e0       	ldi	r24, 0x0E	; 14
     222:	08 95       	ret

00000224 <I2C_0_do_I2C_IDLE>:
     224:	e8 e3       	ldi	r30, 0x38	; 56
     226:	fc e3       	ldi	r31, 0x3C	; 60
     228:	80 81       	ld	r24, Z
     22a:	8e 7f       	andi	r24, 0xFE	; 254
     22c:	80 83       	st	Z, r24
     22e:	13 86       	std	Z+11, r1	; 0x0b
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret

00000234 <I2C_0_do_I2C_SEND_ADR_READ>:
     234:	e8 e3       	ldi	r30, 0x38	; 56
     236:	fc e3       	ldi	r31, 0x3C	; 60
     238:	80 81       	ld	r24, Z
     23a:	88 60       	ori	r24, 0x08	; 8
     23c:	80 83       	st	Z, r24
     23e:	81 81       	ldd	r24, Z+1	; 0x01
     240:	88 0f       	add	r24, r24
     242:	81 60       	ori	r24, 0x01	; 1
     244:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__RODATA_PM_OFFSET__+0x7f8817>
     248:	84 e0       	ldi	r24, 0x04	; 4
     24a:	08 95       	ret

0000024c <I2C_0_do_I2C_SEND_RESTART>:
     24c:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_0_do_I2C_SEND_ADR_READ>
     250:	08 95       	ret

00000252 <I2C_0_do_I2C_SEND_RESTART_READ>:
     252:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_0_do_I2C_SEND_ADR_READ>
     256:	08 95       	ret

00000258 <I2C_0_do_I2C_SEND_ADR_WRITE>:
     258:	e8 e3       	ldi	r30, 0x38	; 56
     25a:	fc e3       	ldi	r31, 0x3C	; 60
     25c:	80 81       	ld	r24, Z
     25e:	88 60       	ori	r24, 0x08	; 8
     260:	80 83       	st	Z, r24
     262:	81 81       	ldd	r24, Z+1	; 0x01
     264:	88 0f       	add	r24, r24
     266:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__RODATA_PM_OFFSET__+0x7f8817>
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	08 95       	ret

0000026e <I2C_0_do_I2C_SEND_RESTART_WRITE>:
     26e:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_0_do_I2C_SEND_ADR_WRITE>
     272:	08 95       	ret

00000274 <I2C_0_do_I2C_RX_DO_ACK>:
     274:	e0 e1       	ldi	r30, 0x10	; 16
     276:	f8 e0       	ldi	r31, 0x08	; 8
     278:	84 81       	ldd	r24, Z+4	; 0x04
     27a:	8b 7f       	andi	r24, 0xFB	; 251
     27c:	84 83       	std	Z+4, r24	; 0x04
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	08 95       	ret

00000282 <I2C_0_do_I2C_TX_DO_ACK>:
     282:	e0 e1       	ldi	r30, 0x10	; 16
     284:	f8 e0       	ldi	r31, 0x08	; 8
     286:	84 81       	ldd	r24, Z+4	; 0x04
     288:	8b 7f       	andi	r24, 0xFB	; 251
     28a:	84 83       	std	Z+4, r24	; 0x04
     28c:	83 e0       	ldi	r24, 0x03	; 3
     28e:	08 95       	ret

00000290 <I2C_0_do_I2C_DO_NACK_RESTART>:
     290:	e0 e1       	ldi	r30, 0x10	; 16
     292:	f8 e0       	ldi	r31, 0x08	; 8
     294:	84 81       	ldd	r24, Z+4	; 0x04
     296:	84 60       	ori	r24, 0x04	; 4
     298:	84 83       	std	Z+4, r24	; 0x04
     29a:	88 e0       	ldi	r24, 0x08	; 8
     29c:	08 95       	ret

0000029e <I2C_0_do_I2C_BUS_ERROR>:
     29e:	e0 e1       	ldi	r30, 0x10	; 16
     2a0:	f8 e0       	ldi	r31, 0x08	; 8
     2a2:	84 81       	ldd	r24, Z+4	; 0x04
     2a4:	88 60       	ori	r24, 0x08	; 8
     2a6:	84 83       	std	Z+4, r24	; 0x04
     2a8:	85 81       	ldd	r24, Z+5	; 0x05
     2aa:	81 60       	ori	r24, 0x01	; 1
     2ac:	85 83       	std	Z+5, r24	; 0x05
     2ae:	e8 e3       	ldi	r30, 0x38	; 56
     2b0:	fc e3       	ldi	r31, 0x3C	; 60
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	80 83       	st	Z, r24
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	83 87       	std	Z+11, r24	; 0x0b
     2bc:	8e e0       	ldi	r24, 0x0E	; 14
     2be:	08 95       	ret

000002c0 <I2C_0_master_isr>:
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	e0 e1       	ldi	r30, 0x10	; 16
     2c6:	f8 e0       	ldi	r31, 0x08	; 8
     2c8:	85 81       	ldd	r24, Z+5	; 0x05
     2ca:	80 6c       	ori	r24, 0xC0	; 192
     2cc:	85 83       	std	Z+5, r24	; 0x05
     2ce:	80 91 38 3c 	lds	r24, 0x3C38	; 0x803c38 <__data_end>
     2d2:	83 ff       	sbrs	r24, 3
     2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <I2C_0_master_isr+0x24>
     2d6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
     2da:	84 ff       	sbrs	r24, 4
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <I2C_0_master_isr+0x24>
     2de:	8f e0       	ldi	r24, 0x0F	; 15
     2e0:	80 93 42 3c 	sts	0x3C42, r24	; 0x803c42 <__data_end+0xa>
     2e4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
     2e8:	83 ff       	sbrs	r24, 3
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <I2C_0_master_isr+0x32>
     2ec:	80 e1       	ldi	r24, 0x10	; 16
     2ee:	80 93 42 3c 	sts	0x3C42, r24	; 0x803c42 <__data_end+0xa>
     2f2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
     2f6:	82 ff       	sbrs	r24, 2
     2f8:	03 c0       	rjmp	.+6      	; 0x300 <I2C_0_master_isr+0x40>
     2fa:	81 e1       	ldi	r24, 0x11	; 17
     2fc:	80 93 42 3c 	sts	0x3C42, r24	; 0x803c42 <__data_end+0xa>
     300:	c8 e3       	ldi	r28, 0x38	; 56
     302:	dc e3       	ldi	r29, 0x3C	; 60
     304:	ea 85       	ldd	r30, Y+10	; 0x0a
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	ea 5f       	subi	r30, 0xFA	; 250
     30e:	f3 4c       	sbci	r31, 0xC3	; 195
     310:	01 90       	ld	r0, Z+
     312:	f0 81       	ld	r31, Z
     314:	e0 2d       	mov	r30, r0
     316:	09 95       	icall
     318:	8a 87       	std	Y+10, r24	; 0x0a
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <I2C_0_do_I2C_BUS_COLLISION>:
     320:	e0 e1       	ldi	r30, 0x10	; 16
     322:	f8 e0       	ldi	r31, 0x08	; 8
     324:	85 81       	ldd	r24, Z+5	; 0x05
     326:	88 60       	ori	r24, 0x08	; 8
     328:	85 83       	std	Z+5, r24	; 0x05
     32a:	a8 e3       	ldi	r26, 0x38	; 56
     32c:	bc e3       	ldi	r27, 0x3C	; 60
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	1b 96       	adiw	r26, 0x0b	; 11
     332:	8c 93       	st	X, r24
     334:	1b 97       	sbiw	r26, 0x0b	; 11
     336:	1e 96       	adiw	r26, 0x0e	; 14
     338:	ed 91       	ld	r30, X+
     33a:	fc 91       	ld	r31, X
     33c:	1f 97       	sbiw	r26, 0x0f	; 15
     33e:	5a 96       	adiw	r26, 0x1a	; 26
     340:	8d 91       	ld	r24, X+
     342:	9c 91       	ld	r25, X
     344:	5b 97       	sbiw	r26, 0x1b	; 27
     346:	09 95       	icall
     348:	82 30       	cpi	r24, 0x02	; 2
     34a:	19 f0       	breq	.+6      	; 0x352 <I2C_0_do_I2C_BUS_COLLISION+0x32>
     34c:	83 30       	cpi	r24, 0x03	; 3
     34e:	21 f0       	breq	.+8      	; 0x358 <I2C_0_do_I2C_BUS_COLLISION+0x38>
     350:	06 c0       	rjmp	.+12     	; 0x35e <I2C_0_do_I2C_BUS_COLLISION+0x3e>
     352:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_0_do_I2C_SEND_ADR_READ>
     356:	08 95       	ret
     358:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_0_do_I2C_SEND_ADR_WRITE>
     35c:	08 95       	ret
     35e:	0e 94 02 01 	call	0x204	; 0x204 <I2C_0_do_I2C_RESET>
     362:	08 95       	ret

00000364 <I2C_0_do_I2C_DO_NACK_STOP>:
     364:	e0 e1       	ldi	r30, 0x10	; 16
     366:	f8 e0       	ldi	r31, 0x08	; 8
     368:	84 81       	ldd	r24, Z+4	; 0x04
     36a:	84 60       	ori	r24, 0x04	; 4
     36c:	84 83       	std	Z+4, r24	; 0x04
     36e:	84 81       	ldd	r24, Z+4	; 0x04
     370:	83 60       	ori	r24, 0x03	; 3
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	e8 e3       	ldi	r30, 0x38	; 56
     376:	fc e3       	ldi	r31, 0x3C	; 60
     378:	80 81       	ld	r24, Z
     37a:	8e 7f       	andi	r24, 0xFE	; 254
     37c:	80 83       	st	Z, r24
     37e:	13 86       	std	Z+11, r1	; 0x0b
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	08 95       	ret

00000384 <I2C_0_do_I2C_RX>:
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	e8 e3       	ldi	r30, 0x38	; 56
     38a:	fc e3       	ldi	r31, 0x3C	; 60
     38c:	80 81       	ld	r24, Z
     38e:	87 7f       	andi	r24, 0xF7	; 247
     390:	80 83       	st	Z, r24
     392:	84 81       	ldd	r24, Z+4	; 0x04
     394:	95 81       	ldd	r25, Z+5	; 0x05
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	31 f4       	brne	.+12     	; 0x3a6 <I2C_0_do_I2C_RX+0x22>
     39a:	e0 e1       	ldi	r30, 0x10	; 16
     39c:	f8 e0       	ldi	r31, 0x08	; 8
     39e:	84 81       	ldd	r24, Z+4	; 0x04
     3a0:	84 60       	ori	r24, 0x04	; 4
     3a2:	84 83       	std	Z+4, r24	; 0x04
     3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <I2C_0_do_I2C_RX+0x2c>
     3a6:	e0 e1       	ldi	r30, 0x10	; 16
     3a8:	f8 e0       	ldi	r31, 0x08	; 8
     3aa:	84 81       	ldd	r24, Z+4	; 0x04
     3ac:	8b 7f       	andi	r24, 0xFB	; 251
     3ae:	84 83       	std	Z+4, r24	; 0x04
     3b0:	e8 e3       	ldi	r30, 0x38	; 56
     3b2:	fc e3       	ldi	r31, 0x3C	; 60
     3b4:	84 81       	ldd	r24, Z+4	; 0x04
     3b6:	95 81       	ldd	r25, Z+5	; 0x05
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	84 83       	std	Z+4, r24	; 0x04
     3bc:	95 83       	std	Z+5, r25	; 0x05
     3be:	89 2b       	or	r24, r25
     3c0:	a9 f0       	breq	.+42     	; 0x3ec <I2C_0_do_I2C_RX+0x68>
     3c2:	df 01       	movw	r26, r30
     3c4:	c2 81       	ldd	r28, Z+2	; 0x02
     3c6:	d3 81       	ldd	r29, Z+3	; 0x03
     3c8:	e0 e1       	ldi	r30, 0x10	; 16
     3ca:	f8 e0       	ldi	r31, 0x08	; 8
     3cc:	80 85       	ldd	r24, Z+8	; 0x08
     3ce:	88 83       	st	Y, r24
     3d0:	12 96       	adiw	r26, 0x02	; 2
     3d2:	8d 91       	ld	r24, X+
     3d4:	9c 91       	ld	r25, X
     3d6:	13 97       	sbiw	r26, 0x03	; 3
     3d8:	01 96       	adiw	r24, 0x01	; 1
     3da:	12 96       	adiw	r26, 0x02	; 2
     3dc:	8d 93       	st	X+, r24
     3de:	9c 93       	st	X, r25
     3e0:	13 97       	sbiw	r26, 0x03	; 3
     3e2:	84 81       	ldd	r24, Z+4	; 0x04
     3e4:	82 60       	ori	r24, 0x02	; 2
     3e6:	84 83       	std	Z+4, r24	; 0x04
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	26 c0       	rjmp	.+76     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
     3ec:	a8 e3       	ldi	r26, 0x38	; 56
     3ee:	bc e3       	ldi	r27, 0x3C	; 60
     3f0:	12 96       	adiw	r26, 0x02	; 2
     3f2:	ed 91       	ld	r30, X+
     3f4:	fc 91       	ld	r31, X
     3f6:	13 97       	sbiw	r26, 0x03	; 3
     3f8:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <__RODATA_PM_OFFSET__+0x7f8818>
     3fc:	80 83       	st	Z, r24
     3fe:	12 96       	adiw	r26, 0x02	; 2
     400:	8d 91       	ld	r24, X+
     402:	9c 91       	ld	r25, X
     404:	13 97       	sbiw	r26, 0x03	; 3
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	12 96       	adiw	r26, 0x02	; 2
     40a:	8d 93       	st	X+, r24
     40c:	9c 93       	st	X, r25
     40e:	13 97       	sbiw	r26, 0x03	; 3
     410:	8c 91       	ld	r24, X
     412:	84 60       	ori	r24, 0x04	; 4
     414:	8c 93       	st	X, r24
     416:	1c 96       	adiw	r26, 0x0c	; 12
     418:	ed 91       	ld	r30, X+
     41a:	fc 91       	ld	r31, X
     41c:	1d 97       	sbiw	r26, 0x0d	; 13
     41e:	58 96       	adiw	r26, 0x18	; 24
     420:	8d 91       	ld	r24, X+
     422:	9c 91       	ld	r25, X
     424:	59 97       	sbiw	r26, 0x19	; 25
     426:	09 95       	icall
     428:	82 50       	subi	r24, 0x02	; 2
     42a:	82 30       	cpi	r24, 0x02	; 2
     42c:	18 f4       	brcc	.+6      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     42e:	0e 94 48 01 	call	0x290	; 0x290 <I2C_0_do_I2C_DO_NACK_RESTART>
     432:	02 c0       	rjmp	.+4      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
     434:	0e 94 b2 01 	call	0x364	; 0x364 <I2C_0_do_I2C_DO_NACK_STOP>
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <I2C_0_do_I2C_SEND_STOP>:
     43e:	e0 e1       	ldi	r30, 0x10	; 16
     440:	f8 e0       	ldi	r31, 0x08	; 8
     442:	84 81       	ldd	r24, Z+4	; 0x04
     444:	83 60       	ori	r24, 0x03	; 3
     446:	84 83       	std	Z+4, r24	; 0x04
     448:	e8 e3       	ldi	r30, 0x38	; 56
     44a:	fc e3       	ldi	r31, 0x3C	; 60
     44c:	80 81       	ld	r24, Z
     44e:	8e 7f       	andi	r24, 0xFE	; 254
     450:	80 83       	st	Z, r24
     452:	13 86       	std	Z+11, r1	; 0x0b
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	08 95       	ret

00000458 <I2C_0_do_I2C_DO_ADDRESS_NACK>:
     458:	a8 e3       	ldi	r26, 0x38	; 56
     45a:	bc e3       	ldi	r27, 0x3C	; 60
     45c:	8c 91       	ld	r24, X
     45e:	87 7f       	andi	r24, 0xF7	; 247
     460:	8c 93       	st	X, r24
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	1b 96       	adiw	r26, 0x0b	; 11
     466:	8c 93       	st	X, r24
     468:	1b 97       	sbiw	r26, 0x0b	; 11
     46a:	50 96       	adiw	r26, 0x10	; 16
     46c:	ed 91       	ld	r30, X+
     46e:	fc 91       	ld	r31, X
     470:	51 97       	sbiw	r26, 0x11	; 17
     472:	5c 96       	adiw	r26, 0x1c	; 28
     474:	8d 91       	ld	r24, X+
     476:	9c 91       	ld	r25, X
     478:	5d 97       	sbiw	r26, 0x1d	; 29
     47a:	09 95       	icall
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	19 f0       	breq	.+6      	; 0x486 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
     480:	83 30       	cpi	r24, 0x03	; 3
     482:	21 f0       	breq	.+8      	; 0x48c <I2C_0_do_I2C_DO_ADDRESS_NACK+0x34>
     484:	06 c0       	rjmp	.+12     	; 0x492 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x3a>
     486:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_0_do_I2C_SEND_ADR_READ>
     48a:	08 95       	ret
     48c:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_0_do_I2C_SEND_ADR_WRITE>
     490:	08 95       	ret
     492:	0e 94 1f 02 	call	0x43e	; 0x43e <I2C_0_do_I2C_SEND_STOP>
     496:	08 95       	ret

00000498 <I2C_0_do_I2C_TX>:
     498:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
     49c:	84 ff       	sbrs	r24, 4
     49e:	19 c0       	rjmp	.+50     	; 0x4d2 <I2C_0_do_I2C_TX+0x3a>
     4a0:	a8 e3       	ldi	r26, 0x38	; 56
     4a2:	bc e3       	ldi	r27, 0x3C	; 60
     4a4:	52 96       	adiw	r26, 0x12	; 18
     4a6:	ed 91       	ld	r30, X+
     4a8:	fc 91       	ld	r31, X
     4aa:	53 97       	sbiw	r26, 0x13	; 19
     4ac:	5e 96       	adiw	r26, 0x1e	; 30
     4ae:	8d 91       	ld	r24, X+
     4b0:	9c 91       	ld	r25, X
     4b2:	5f 97       	sbiw	r26, 0x1f	; 31
     4b4:	09 95       	icall
     4b6:	82 30       	cpi	r24, 0x02	; 2
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <I2C_0_do_I2C_TX+0x28>
     4ba:	83 30       	cpi	r24, 0x03	; 3
     4bc:	21 f0       	breq	.+8      	; 0x4c6 <I2C_0_do_I2C_TX+0x2e>
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <I2C_0_do_I2C_TX+0x34>
     4c0:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_0_do_I2C_SEND_ADR_READ>
     4c4:	08 95       	ret
     4c6:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_0_do_I2C_SEND_ADR_WRITE>
     4ca:	08 95       	ret
     4cc:	0e 94 1f 02 	call	0x43e	; 0x43e <I2C_0_do_I2C_SEND_STOP>
     4d0:	08 95       	ret
     4d2:	e8 e3       	ldi	r30, 0x38	; 56
     4d4:	fc e3       	ldi	r31, 0x3C	; 60
     4d6:	80 81       	ld	r24, Z
     4d8:	87 7f       	andi	r24, 0xF7	; 247
     4da:	80 83       	st	Z, r24
     4dc:	a2 81       	ldd	r26, Z+2	; 0x02
     4de:	b3 81       	ldd	r27, Z+3	; 0x03
     4e0:	cd 01       	movw	r24, r26
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	82 83       	std	Z+2, r24	; 0x02
     4e6:	93 83       	std	Z+3, r25	; 0x03
     4e8:	8c 91       	ld	r24, X
     4ea:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__RODATA_PM_OFFSET__+0x7f8818>
     4ee:	84 81       	ldd	r24, Z+4	; 0x04
     4f0:	95 81       	ldd	r25, Z+5	; 0x05
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	84 83       	std	Z+4, r24	; 0x04
     4f6:	95 83       	std	Z+5, r25	; 0x05
     4f8:	89 2b       	or	r24, r25
     4fa:	11 f4       	brne	.+4      	; 0x500 <I2C_0_do_I2C_TX+0x68>
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	08 95       	ret
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	08 95       	ret

00000504 <I2C_0_do_I2C_TX_EMPTY>:
     504:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
     508:	84 ff       	sbrs	r24, 4
     50a:	19 c0       	rjmp	.+50     	; 0x53e <I2C_0_do_I2C_TX_EMPTY+0x3a>
     50c:	a8 e3       	ldi	r26, 0x38	; 56
     50e:	bc e3       	ldi	r27, 0x3C	; 60
     510:	52 96       	adiw	r26, 0x12	; 18
     512:	ed 91       	ld	r30, X+
     514:	fc 91       	ld	r31, X
     516:	53 97       	sbiw	r26, 0x13	; 19
     518:	5e 96       	adiw	r26, 0x1e	; 30
     51a:	8d 91       	ld	r24, X+
     51c:	9c 91       	ld	r25, X
     51e:	5f 97       	sbiw	r26, 0x1f	; 31
     520:	09 95       	icall
     522:	82 30       	cpi	r24, 0x02	; 2
     524:	19 f0       	breq	.+6      	; 0x52c <I2C_0_do_I2C_TX_EMPTY+0x28>
     526:	83 30       	cpi	r24, 0x03	; 3
     528:	21 f0       	breq	.+8      	; 0x532 <I2C_0_do_I2C_TX_EMPTY+0x2e>
     52a:	06 c0       	rjmp	.+12     	; 0x538 <I2C_0_do_I2C_TX_EMPTY+0x34>
     52c:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_0_do_I2C_SEND_ADR_READ>
     530:	08 95       	ret
     532:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_0_do_I2C_SEND_ADR_WRITE>
     536:	08 95       	ret
     538:	0e 94 1f 02 	call	0x43e	; 0x43e <I2C_0_do_I2C_SEND_STOP>
     53c:	08 95       	ret
     53e:	a8 e3       	ldi	r26, 0x38	; 56
     540:	bc e3       	ldi	r27, 0x3C	; 60
     542:	8c 91       	ld	r24, X
     544:	84 60       	ori	r24, 0x04	; 4
     546:	8c 93       	st	X, r24
     548:	1c 96       	adiw	r26, 0x0c	; 12
     54a:	ed 91       	ld	r30, X+
     54c:	fc 91       	ld	r31, X
     54e:	1d 97       	sbiw	r26, 0x0d	; 13
     550:	58 96       	adiw	r26, 0x18	; 24
     552:	8d 91       	ld	r24, X+
     554:	9c 91       	ld	r25, X
     556:	59 97       	sbiw	r26, 0x19	; 25
     558:	09 95       	icall
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	39 f0       	breq	.+14     	; 0x56c <I2C_0_do_I2C_TX_EMPTY+0x68>
     55e:	84 30       	cpi	r24, 0x04	; 4
     560:	41 f0       	breq	.+16     	; 0x572 <I2C_0_do_I2C_TX_EMPTY+0x6e>
     562:	82 30       	cpi	r24, 0x02	; 2
     564:	49 f4       	brne	.+18     	; 0x578 <I2C_0_do_I2C_TX_EMPTY+0x74>
     566:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_0_do_I2C_SEND_ADR_READ>
     56a:	08 95       	ret
     56c:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_0_do_I2C_SEND_ADR_WRITE>
     570:	08 95       	ret
     572:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_0_do_I2C_TX>
     576:	08 95       	ret
     578:	0e 94 1f 02 	call	0x43e	; 0x43e <I2C_0_do_I2C_SEND_STOP>
     57c:	08 95       	ret

0000057e <I2C_0_init>:
     57e:	e0 e1       	ldi	r30, 0x10	; 16
     580:	f8 e0       	ldi	r31, 0x08	; 8
     582:	8f e5       	ldi	r24, 0x5F	; 95
     584:	86 83       	std	Z+6, r24	; 0x06
     586:	81 ec       	ldi	r24, 0xC1	; 193
     588:	83 83       	std	Z+3, r24	; 0x03
     58a:	08 95       	ret

0000058c <__vector_25>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
     58c:	1f 92       	push	r1
     58e:	0f 92       	push	r0
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	0f 92       	push	r0
     594:	11 24       	eor	r1, r1
     596:	2f 93       	push	r18
     598:	3f 93       	push	r19
     59a:	4f 93       	push	r20
     59c:	5f 93       	push	r21
     59e:	6f 93       	push	r22
     5a0:	7f 93       	push	r23
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
	I2C_0_master_isr();
     5ae:	0e 94 60 01 	call	0x2c0	; 0x2c0 <I2C_0_master_isr>
}
     5b2:	ff 91       	pop	r31
     5b4:	ef 91       	pop	r30
     5b6:	bf 91       	pop	r27
     5b8:	af 91       	pop	r26
     5ba:	9f 91       	pop	r25
     5bc:	8f 91       	pop	r24
     5be:	7f 91       	pop	r23
     5c0:	6f 91       	pop	r22
     5c2:	5f 91       	pop	r21
     5c4:	4f 91       	pop	r20
     5c6:	3f 91       	pop	r19
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     5d4:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     5d6:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     5d8:	40 83       	st	Z, r20
	ret                             // Return to caller
     5da:	08 95       	ret

000005dc <PWM_0_init>:
 *
 * \return Nothing.
 */
void PWM_0_register_callback(pwm_irq_cb_t f)
{
	PWM_0_cb = f;
     5dc:	e0 e0       	ldi	r30, 0x00	; 0
     5de:	fa e0       	ldi	r31, 0x0A	; 10
     5e0:	85 e0       	ldi	r24, 0x05	; 5
     5e2:	81 83       	std	Z+1, r24	; 0x01
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	80 83       	st	Z, r24
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	08 95       	ret

000005ec <__vector_8>:
}

ISR(TCA0_OVF_vect)
{
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	11 24       	eor	r1, r1
     5f6:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_0_INTERRUPT_CB_RATE) && (PWM_0_INTERRUPT_CB_RATE != 0)) {
     5fe:	80 91 5c 3c 	lds	r24, 0x3C5C	; 0x803c5c <callback_count.3091>
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	80 93 5c 3c 	sts	0x3C5C, r24	; 0x803c5c <callback_count.3091>
		if (PWM_0_cb != NULL) {
			PWM_0_cb();
		}
	}
}
     608:	8f 91       	pop	r24
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <RTC_0_init>:
	heartbeat_en = 1;
}

	
void RTC_0_disable_heartbeat() {
	heartbeat_en = 0;
     614:	e0 e4       	ldi	r30, 0x40	; 64
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	81 11       	cpse	r24, r1
     61c:	fd cf       	rjmp	.-6      	; 0x618 <RTC_0_init+0x4>
     61e:	e0 e4       	ldi	r30, 0x40	; 64
     620:	f1 e0       	ldi	r31, 0x01	; 1
     622:	10 82       	st	Z, r1
     624:	17 82       	std	Z+7, r1	; 0x07
     626:	81 e4       	ldi	r24, 0x41	; 65
     628:	80 8b       	std	Z+16, r24	; 0x10
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	82 8b       	std	Z+18, r24	; 0x12
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	08 95       	ret

00000632 <RTC_0_enable_heartbeat>:
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	80 93 60 3c 	sts	0x3C60, r24	; 0x803c60 <heartbeat_en>
     638:	08 95       	ret

0000063a <__vector_7>:
			break;
	}
}


ISR(RTC_PIT_vect) {
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	11 24       	eor	r1, r1
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
	if (heartbeat_en) {
     648:	80 91 60 3c 	lds	r24, 0x3C60	; 0x803c60 <heartbeat_en>
     64c:	88 23       	and	r24, r24
     64e:	09 f4       	brne	.+2      	; 0x652 <__vector_7+0x18>
     650:	70 c0       	rjmp	.+224    	; 0x732 <__vector_7+0xf8>

static void __heart_beat_update() {
	static uint16_t _count = 0;
	static uint8_t _state = 0;
	
	switch(_state) {
     652:	80 91 5f 3c 	lds	r24, 0x3C5F	; 0x803c5f <_state.3490>
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	f9 f0       	breq	.+62     	; 0x698 <__vector_7+0x5e>
     65a:	30 f0       	brcs	.+12     	; 0x668 <__vector_7+0x2e>
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	a1 f1       	breq	.+104    	; 0x6c8 <__vector_7+0x8e>
     660:	83 30       	cpi	r24, 0x03	; 3
     662:	09 f4       	brne	.+2      	; 0x666 <__vector_7+0x2c>
     664:	49 c0       	rjmp	.+146    	; 0x6f8 <__vector_7+0xbe>
     666:	5f c0       	rjmp	.+190    	; 0x726 <__vector_7+0xec>
		case 0:
			if (_count >= 63) {
     668:	80 91 5d 3c 	lds	r24, 0x3C5D	; 0x803c5d <_count.3489>
     66c:	90 91 5e 3c 	lds	r25, 0x3C5E	; 0x803c5e <_count.3489+0x1>
     670:	cf 97       	sbiw	r24, 0x3f	; 63
     672:	40 f0       	brcs	.+16     	; 0x684 <__vector_7+0x4a>
				_count = 0;
     674:	10 92 5d 3c 	sts	0x3C5D, r1	; 0x803c5d <_count.3489>
     678:	10 92 5e 3c 	sts	0x3C5E, r1	; 0x803c5e <_count.3489+0x1>
				_state = 1;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 5f 3c 	sts	0x3C5F, r24	; 0x803c5f <_state.3490>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     682:	09 9a       	sbi	0x01, 1	; 1
				INDICATOR_set_level(true);
			}
			_count++;
     684:	80 91 5d 3c 	lds	r24, 0x3C5D	; 0x803c5d <_count.3489>
     688:	90 91 5e 3c 	lds	r25, 0x3C5E	; 0x803c5e <_count.3489+0x1>
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	80 93 5d 3c 	sts	0x3C5D, r24	; 0x803c5d <_count.3489>
     692:	90 93 5e 3c 	sts	0x3C5E, r25	; 0x803c5e <_count.3489+0x1>
     696:	4d c0       	rjmp	.+154    	; 0x732 <__vector_7+0xf8>
			break;
		case 1:
			if (_count >= 5) {
     698:	80 91 5d 3c 	lds	r24, 0x3C5D	; 0x803c5d <_count.3489>
     69c:	90 91 5e 3c 	lds	r25, 0x3C5E	; 0x803c5e <_count.3489+0x1>
     6a0:	05 97       	sbiw	r24, 0x05	; 5
     6a2:	40 f0       	brcs	.+16     	; 0x6b4 <__vector_7+0x7a>
				_count = 0;
     6a4:	10 92 5d 3c 	sts	0x3C5D, r1	; 0x803c5d <_count.3489>
     6a8:	10 92 5e 3c 	sts	0x3C5E, r1	; 0x803c5e <_count.3489+0x1>
				_state = 2;
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	80 93 5f 3c 	sts	0x3C5F, r24	; 0x803c5f <_state.3490>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     6b2:	09 98       	cbi	0x01, 1	; 1
				INDICATOR_set_level(false);
			}			
			_count++;
     6b4:	80 91 5d 3c 	lds	r24, 0x3C5D	; 0x803c5d <_count.3489>
     6b8:	90 91 5e 3c 	lds	r25, 0x3C5E	; 0x803c5e <_count.3489+0x1>
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	80 93 5d 3c 	sts	0x3C5D, r24	; 0x803c5d <_count.3489>
     6c2:	90 93 5e 3c 	sts	0x3C5E, r25	; 0x803c5e <_count.3489+0x1>
     6c6:	35 c0       	rjmp	.+106    	; 0x732 <__vector_7+0xf8>
			break;
		case 2:
			if (_count >= 10) {
     6c8:	80 91 5d 3c 	lds	r24, 0x3C5D	; 0x803c5d <_count.3489>
     6cc:	90 91 5e 3c 	lds	r25, 0x3C5E	; 0x803c5e <_count.3489+0x1>
     6d0:	0a 97       	sbiw	r24, 0x0a	; 10
     6d2:	40 f0       	brcs	.+16     	; 0x6e4 <__vector_7+0xaa>
				_count = 0;
     6d4:	10 92 5d 3c 	sts	0x3C5D, r1	; 0x803c5d <_count.3489>
     6d8:	10 92 5e 3c 	sts	0x3C5E, r1	; 0x803c5e <_count.3489+0x1>
				_state = 3;
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	80 93 5f 3c 	sts	0x3C5F, r24	; 0x803c5f <_state.3490>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     6e2:	09 9a       	sbi	0x01, 1	; 1
				INDICATOR_set_level(true);
			}
			_count++;
     6e4:	80 91 5d 3c 	lds	r24, 0x3C5D	; 0x803c5d <_count.3489>
     6e8:	90 91 5e 3c 	lds	r25, 0x3C5E	; 0x803c5e <_count.3489+0x1>
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	80 93 5d 3c 	sts	0x3C5D, r24	; 0x803c5d <_count.3489>
     6f2:	90 93 5e 3c 	sts	0x3C5E, r25	; 0x803c5e <_count.3489+0x1>
     6f6:	1d c0       	rjmp	.+58     	; 0x732 <__vector_7+0xf8>
			break;
		case 3:
			if (_count >= 5) {
     6f8:	80 91 5d 3c 	lds	r24, 0x3C5D	; 0x803c5d <_count.3489>
     6fc:	90 91 5e 3c 	lds	r25, 0x3C5E	; 0x803c5e <_count.3489+0x1>
     700:	05 97       	sbiw	r24, 0x05	; 5
     702:	38 f0       	brcs	.+14     	; 0x712 <__vector_7+0xd8>
				_count = 0;
     704:	10 92 5d 3c 	sts	0x3C5D, r1	; 0x803c5d <_count.3489>
     708:	10 92 5e 3c 	sts	0x3C5E, r1	; 0x803c5e <_count.3489+0x1>
				_state = 0;
     70c:	10 92 5f 3c 	sts	0x3C5F, r1	; 0x803c5f <_state.3490>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     710:	09 98       	cbi	0x01, 1	; 1
				INDICATOR_set_level(false);
			}
			_count++;
     712:	80 91 5d 3c 	lds	r24, 0x3C5D	; 0x803c5d <_count.3489>
     716:	90 91 5e 3c 	lds	r25, 0x3C5E	; 0x803c5e <_count.3489+0x1>
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	80 93 5d 3c 	sts	0x3C5D, r24	; 0x803c5d <_count.3489>
     720:	90 93 5e 3c 	sts	0x3C5E, r25	; 0x803c5e <_count.3489+0x1>
     724:	06 c0       	rjmp	.+12     	; 0x732 <__vector_7+0xf8>
			break;
		default:
			_state = 0;
     726:	10 92 5f 3c 	sts	0x3C5F, r1	; 0x803c5f <_state.3490>
			_count = 0;
     72a:	10 92 5d 3c 	sts	0x3C5D, r1	; 0x803c5d <_count.3489>
     72e:	10 92 5e 3c 	sts	0x3C5E, r1	; 0x803c5e <_count.3489+0x1>

ISR(RTC_PIT_vect) {
	if (heartbeat_en) {
		__heart_beat_update();
	}
	RTC.PITINTFLAGS = RTC_PI_bm;
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__RODATA_PM_OFFSET__+0x7f8153>
}
     738:	9f 91       	pop	r25
     73a:	8f 91       	pop	r24
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	08 95       	ret

0000074a <TIMER_0_init>:
}

int8_t TIMER_0_set_period_callback(void(*callback)()) {
	TIMER_0_callback = callback;
	return 0;
}
     74a:	e0 e4       	ldi	r30, 0x40	; 64
     74c:	fa e0       	ldi	r31, 0x0A	; 10
     74e:	14 86       	std	Z+12, r1	; 0x0c
     750:	15 86       	std	Z+13, r1	; 0x0d
     752:	12 86       	std	Z+10, r1	; 0x0a
     754:	13 86       	std	Z+11, r1	; 0x0b
     756:	11 82       	std	Z+1, r1	; 0x01
     758:	10 86       	std	Z+8, r1	; 0x08
     75a:	14 82       	std	Z+4, r1	; 0x04
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	85 83       	std	Z+5, r24	; 0x05
     760:	10 82       	st	Z, r1
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	08 95       	ret

00000766 <__vector_13>:

ISR(TCB0_INT_vect) {
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	2f 93       	push	r18
     772:	3f 93       	push	r19
     774:	4f 93       	push	r20
     776:	5f 93       	push	r21
     778:	6f 93       	push	r22
     77a:	7f 93       	push	r23
     77c:	8f 93       	push	r24
     77e:	9f 93       	push	r25
     780:	af 93       	push	r26
     782:	bf 93       	push	r27
     784:	ef 93       	push	r30
     786:	ff 93       	push	r31
	TCB0.INTFLAGS = 1;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__RODATA_PM_OFFSET__+0x7f8a46>
	if (TIMER_0_callback != NULL)
     78e:	e0 91 61 3c 	lds	r30, 0x3C61	; 0x803c61 <TIMER_0_callback>
     792:	f0 91 62 3c 	lds	r31, 0x3C62	; 0x803c62 <TIMER_0_callback+0x1>
     796:	30 97       	sbiw	r30, 0x00	; 0
     798:	09 f0       	breq	.+2      	; 0x79c <__vector_13+0x36>
		TIMER_0_callback();
     79a:	09 95       	icall
}
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	bf 91       	pop	r27
     7a2:	af 91       	pop	r26
     7a4:	9f 91       	pop	r25
     7a6:	8f 91       	pop	r24
     7a8:	7f 91       	pop	r23
     7aa:	6f 91       	pop	r22
     7ac:	5f 91       	pop	r21
     7ae:	4f 91       	pop	r20
     7b0:	3f 91       	pop	r19
     7b2:	2f 91       	pop	r18
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     7be:	e0 e0       	ldi	r30, 0x00	; 0
     7c0:	f8 e0       	ldi	r31, 0x08	; 8
     7c2:	8d e8       	ldi	r24, 0x8D	; 141
     7c4:	90 e2       	ldi	r25, 0x20	; 32
     7c6:	80 87       	std	Z+8, r24	; 0x08
     7c8:	91 87       	std	Z+9, r25	; 0x09
     7ca:	80 ec       	ldi	r24, 0xC0	; 192
     7cc:	86 83       	std	Z+6, r24	; 0x06
     7ce:	8a e2       	ldi	r24, 0x2A	; 42
     7d0:	9c e3       	ldi	r25, 0x3C	; 60
     7d2:	80 93 7a 3c 	sts	0x3C7A, r24	; 0x803c7a <__iob+0x2>
     7d6:	90 93 7b 3c 	sts	0x3C7B, r25	; 0x803c7b <__iob+0x3>
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	08 95       	ret

000007de <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     7de:	e0 e0       	ldi	r30, 0x00	; 0
     7e0:	f8 e0       	ldi	r31, 0x08	; 8
     7e2:	94 81       	ldd	r25, Z+4	; 0x04
     7e4:	95 ff       	sbrs	r25, 5
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <USART_0_write+0x4>
		;
	USART0.TXDATAL = data;
     7e8:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
     7ec:	08 95       	ret

000007ee <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     7ee:	0e 94 ef 03 	call	0x7de	; 0x7de <USART_0_write>
	return 0;
}
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	08 95       	ret

000007f8 <WDT_0_init>:

	// ccp_write_io((void*)&(WDT.CTRLA),WDT_PERIOD_OFF_gc /* Watch-Dog timer Off */
	//		 | WDT_WINDOW_OFF_gc /* Window mode off */);

	return 0;
}
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	08 95       	ret

000007fc <WS2812_Wheel>:
    return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
  }
  
  // Input a value 0 to 255 to get a color value.
  // The colors are a transition r - g - b - back to r.
  static uint32_t WS2812_Wheel(uint8_t WheelPos) {
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
	  WheelPos = 255 - WheelPos;
     800:	80 95       	com	r24
	  if (WheelPos < 85) {
     802:	85 35       	cpi	r24, 0x55	; 85
     804:	60 f4       	brcc	.+24     	; 0x81e <WS2812_Wheel+0x22>
             variable for later use or passed to the setPixelColor()
             function. Packed WRGB format is predictable, regardless of
             LED strand color order.
  */
  static uint32_t   WS2812_Color_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
    return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     806:	68 2f       	mov	r22, r24
     808:	66 0f       	add	r22, r22
     80a:	86 0f       	add	r24, r22
     80c:	28 2f       	mov	r18, r24
     80e:	20 95       	com	r18
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a0 e0       	ldi	r26, 0x00	; 0
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	bc 01       	movw	r22, r24
     818:	cd 01       	movw	r24, r26
     81a:	82 2b       	or	r24, r18
  // Input a value 0 to 255 to get a color value.
  // The colors are a transition r - g - b - back to r.
  static uint32_t WS2812_Wheel(uint8_t WheelPos) {
	  WheelPos = 255 - WheelPos;
	  if (WheelPos < 85) {
		  return WS2812_Color_RGBW(255 - WheelPos * 3, 0, WheelPos * 3, 0);
     81c:	24 c0       	rjmp	.+72     	; 0x866 <WS2812_Wheel+0x6a>
	  }
	  if (WheelPos < 170) {
     81e:	8a 3a       	cpi	r24, 0xAA	; 170
     820:	98 f4       	brcc	.+38     	; 0x848 <WS2812_Wheel+0x4c>
		  WheelPos -= 85;
     822:	85 55       	subi	r24, 0x55	; 85
             variable for later use or passed to the setPixelColor()
             function. Packed WRGB format is predictable, regardless of
             LED strand color order.
  */
  static uint32_t   WS2812_Color_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
    return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     824:	98 2f       	mov	r25, r24
     826:	99 0f       	add	r25, r25
     828:	98 0f       	add	r25, r24
     82a:	49 2f       	mov	r20, r25
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	76 2f       	mov	r23, r22
     834:	65 2f       	mov	r22, r21
     836:	54 2f       	mov	r21, r20
     838:	44 27       	eor	r20, r20
     83a:	90 95       	com	r25
     83c:	8a 01       	movw	r16, r20
     83e:	9b 01       	movw	r18, r22
     840:	09 2b       	or	r16, r25
     842:	c9 01       	movw	r24, r18
     844:	b8 01       	movw	r22, r16
	  if (WheelPos < 85) {
		  return WS2812_Color_RGBW(255 - WheelPos * 3, 0, WheelPos * 3, 0);
	  }
	  if (WheelPos < 170) {
		  WheelPos -= 85;
		  return WS2812_Color_RGBW(0, WheelPos * 3, 255 - WheelPos * 3, 0);
     846:	0f c0       	rjmp	.+30     	; 0x866 <WS2812_Wheel+0x6a>
	  }
	  WheelPos -= 170;
     848:	8a 5a       	subi	r24, 0xAA	; 170
             variable for later use or passed to the setPixelColor()
             function. Packed WRGB format is predictable, regardless of
             LED strand color order.
  */
  static uint32_t   WS2812_Color_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
    return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     84a:	68 2f       	mov	r22, r24
     84c:	66 0f       	add	r22, r22
     84e:	86 0f       	add	r24, r22
     850:	28 2f       	mov	r18, r24
     852:	20 95       	com	r18
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	dc 01       	movw	r26, r24
     85c:	99 27       	eor	r25, r25
     85e:	88 27       	eor	r24, r24
     860:	bc 01       	movw	r22, r24
     862:	cd 01       	movw	r24, r26
     864:	72 2b       	or	r23, r18
		  WheelPos -= 85;
		  return WS2812_Color_RGBW(0, WheelPos * 3, 255 - WheelPos * 3, 0);
	  }
	  WheelPos -= 170;
	  return WS2812_Color_RGBW(WheelPos * 3, 255 - WheelPos * 3, 0, 0);
  }
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	08 95       	ret

0000086c <full_rl_rainbow>:

static uint8_t num_groups = 0;
static uint8_t num_leds_per_group = 0;
static uint8_t degree_spacing = 0;

void full_rl_rainbow() {
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
	for (int j = 0; j < 255; j += 1) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
			WS2812_set_pixel_color_C(i, WS2812_Wheel(j)); // Moderately bright green color.
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	1b c0       	rjmp	.+54     	; 0x8b4 <full_rl_rainbow+0x48>
     87e:	b7 01       	movw	r22, r14
     880:	a6 01       	movw	r20, r12
     882:	ce 01       	movw	r24, r28
     884:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>
static uint8_t num_leds_per_group = 0;
static uint8_t degree_spacing = 0;

void full_rl_rainbow() {
	for (int j = 0; j < 255; j += 1) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     888:	21 96       	adiw	r28, 0x01	; 1
     88a:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     88e:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     892:	89 9f       	mul	r24, r25
     894:	c0 01       	movw	r24, r0
     896:	11 24       	eor	r1, r1
     898:	c8 17       	cp	r28, r24
     89a:	d9 07       	cpc	r29, r25
     89c:	84 f3       	brlt	.-32     	; 0x87e <full_rl_rainbow+0x12>
			WS2812_set_pixel_color_C(i, WS2812_Wheel(j)); // Moderately bright green color.
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     89e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a2:	8f e4       	ldi	r24, 0x4F	; 79
     8a4:	93 ec       	ldi	r25, 0xC3	; 195
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <full_rl_rainbow+0x3a>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <full_rl_rainbow+0x40>
     8ac:	00 00       	nop
     8ae:	1f 5f       	subi	r17, 0xFF	; 255
static uint8_t num_groups = 0;
static uint8_t num_leds_per_group = 0;
static uint8_t degree_spacing = 0;

void full_rl_rainbow() {
	for (int j = 0; j < 255; j += 1) {
     8b0:	1f 3f       	cpi	r17, 0xFF	; 255
     8b2:	91 f0       	breq	.+36     	; 0x8d8 <full_rl_rainbow+0x6c>
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     8b4:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     8b8:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     8bc:	89 9f       	mul	r24, r25
     8be:	c0 01       	movw	r24, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	18 16       	cp	r1, r24
     8c4:	19 06       	cpc	r1, r25
     8c6:	5c f7       	brge	.-42     	; 0x89e <full_rl_rainbow+0x32>
			WS2812_set_pixel_color_C(i, WS2812_Wheel(j)); // Moderately bright green color.
     8c8:	81 2f       	mov	r24, r17
     8ca:	0e 94 fe 03 	call	0x7fc	; 0x7fc <WS2812_Wheel>
     8ce:	6b 01       	movw	r12, r22
     8d0:	7c 01       	movw	r14, r24
     8d2:	c0 e0       	ldi	r28, 0x00	; 0
     8d4:	d0 e0       	ldi	r29, 0x00	; 0
     8d6:	d3 cf       	rjmp	.-90     	; 0x87e <full_rl_rainbow+0x12>
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(10);
	}
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	08 95       	ret

000008e8 <chasing_rainbow>:

void chasing_rainbow() {
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
	for (int j = 0; j < 255; j += 1) {
		for (int i = 0; i < num_groups; i++) {
     8f2:	f1 2c       	mov	r15, r1
     8f4:	36 c0       	rjmp	.+108    	; 0x962 <chasing_rainbow+0x7a>
			// WS2812_Color_RGB takes RGB values, from 0,0,0 up to 255,255,255
			for (uint8_t k = 0; k < num_leds_per_group; k++) {
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
				WS2812_set_pixel_color_C((i * num_leds_per_group) + k, WS2812_Wheel(j + (i * degree_spacing))); // Moderately bright green color.
     8f8:	80 91 63 3c 	lds	r24, 0x3C63	; 0x803c63 <degree_spacing>
     8fc:	9f 2d       	mov	r25, r15
     8fe:	80 9f       	mul	r24, r16
     900:	90 0d       	add	r25, r0
     902:	11 24       	eor	r1, r1
     904:	89 2f       	mov	r24, r25
     906:	0e 94 fe 03 	call	0x7fc	; 0x7fc <WS2812_Wheel>
     90a:	ab 01       	movw	r20, r22
     90c:	bc 01       	movw	r22, r24
     90e:	d0 9f       	mul	r29, r16
     910:	c0 01       	movw	r24, r0
     912:	d1 9f       	mul	r29, r17
     914:	90 0d       	add	r25, r0
     916:	11 24       	eor	r1, r1
     918:	8c 0f       	add	r24, r28
     91a:	91 1d       	adc	r25, r1
     91c:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>

void chasing_rainbow() {
	for (int j = 0; j < 255; j += 1) {
		for (int i = 0; i < num_groups; i++) {
			// WS2812_Color_RGB takes RGB values, from 0,0,0 up to 255,255,255
			for (uint8_t k = 0; k < num_leds_per_group; k++) {
     920:	cf 5f       	subi	r28, 0xFF	; 255
     922:	d0 91 64 3c 	lds	r29, 0x3C64	; 0x803c64 <num_leds_per_group>
     926:	cd 17       	cp	r28, r29
     928:	38 f3       	brcs	.-50     	; 0x8f8 <chasing_rainbow+0x10>
	}
}

void chasing_rainbow() {
	for (int j = 0; j < 255; j += 1) {
		for (int i = 0; i < num_groups; i++) {
     92a:	0f 5f       	subi	r16, 0xFF	; 255
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	08 17       	cp	r16, r24
     936:	19 07       	cpc	r17, r25
     938:	1c f0       	brlt	.+6      	; 0x940 <chasing_rainbow+0x58>
     93a:	07 c0       	rjmp	.+14     	; 0x94a <chasing_rainbow+0x62>
     93c:	00 e0       	ldi	r16, 0x00	; 0
     93e:	10 e0       	ldi	r17, 0x00	; 0
			// WS2812_Color_RGB takes RGB values, from 0,0,0 up to 255,255,255
			for (uint8_t k = 0; k < num_leds_per_group; k++) {
     940:	d0 91 64 3c 	lds	r29, 0x3C64	; 0x803c64 <num_leds_per_group>
     944:	d1 11       	cpse	r29, r1
     946:	d7 cf       	rjmp	.-82     	; 0x8f6 <chasing_rainbow+0xe>
     948:	f0 cf       	rjmp	.-32     	; 0x92a <chasing_rainbow+0x42>
				WS2812_set_pixel_color_C((i * num_leds_per_group) + k, WS2812_Wheel(j + (i * degree_spacing))); // Moderately bright green color.
			}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     94a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     94e:	8f e4       	ldi	r24, 0x4F	; 79
     950:	93 ec       	ldi	r25, 0xC3	; 195
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <chasing_rainbow+0x6a>
     956:	00 c0       	rjmp	.+0      	; 0x958 <chasing_rainbow+0x70>
     958:	00 00       	nop
     95a:	f3 94       	inc	r15
		_delay_ms(10);
	}
}

void chasing_rainbow() {
	for (int j = 0; j < 255; j += 1) {
     95c:	9f ef       	ldi	r25, 0xFF	; 255
     95e:	f9 16       	cp	r15, r25
     960:	29 f0       	breq	.+10     	; 0x96c <chasing_rainbow+0x84>
		for (int i = 0; i < num_groups; i++) {
     962:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     966:	81 11       	cpse	r24, r1
     968:	e9 cf       	rjmp	.-46     	; 0x93c <chasing_rainbow+0x54>
     96a:	ef cf       	rjmp	.-34     	; 0x94a <chasing_rainbow+0x62>
			}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(10);
	}
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	08 95       	ret

00000978 <ramp_blue>:

void ramp_blue() {
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
	for (int j = 0; j < 255; j++) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     984:	c1 2c       	mov	r12, r1
     986:	d1 2c       	mov	r13, r1
     988:	76 01       	movw	r14, r12
     98a:	25 c0       	rjmp	.+74     	; 0x9d6 <ramp_blue+0x5e>
     98c:	c0 e0       	ldi	r28, 0x00	; 0
     98e:	d0 e0       	ldi	r29, 0x00	; 0
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, 0, j)); // Moderately bright green color.}
     990:	b7 01       	movw	r22, r14
     992:	a6 01       	movw	r20, r12
     994:	ce 01       	movw	r24, r28
     996:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>
	}
}

void ramp_blue() {
	for (int j = 0; j < 255; j++) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     99a:	21 96       	adiw	r28, 0x01	; 1
     99c:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     9a0:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     9a4:	89 9f       	mul	r24, r25
     9a6:	c0 01       	movw	r24, r0
     9a8:	11 24       	eor	r1, r1
     9aa:	c8 17       	cp	r28, r24
     9ac:	d9 07       	cpc	r29, r25
     9ae:	84 f3       	brlt	.-32     	; 0x990 <ramp_blue+0x18>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, 0, j)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     9b0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     9b4:	87 e8       	ldi	r24, 0x87	; 135
     9b6:	93 e1       	ldi	r25, 0x13	; 19
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <ramp_blue+0x40>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <ramp_blue+0x46>
     9be:	00 00       	nop
     9c0:	9f ef       	ldi	r25, 0xFF	; 255
     9c2:	c9 1a       	sub	r12, r25
     9c4:	d9 0a       	sbc	r13, r25
     9c6:	e9 0a       	sbc	r14, r25
     9c8:	f9 0a       	sbc	r15, r25
		_delay_ms(10);
	}
}

void ramp_blue() {
	for (int j = 0; j < 255; j++) {
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	c8 16       	cp	r12, r24
     9ce:	d1 04       	cpc	r13, r1
     9d0:	e1 04       	cpc	r14, r1
     9d2:	f1 04       	cpc	r15, r1
     9d4:	59 f1       	breq	.+86     	; 0xa2c <ramp_blue+0xb4>
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     9d6:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     9da:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     9de:	89 9f       	mul	r24, r25
     9e0:	c0 01       	movw	r24, r0
     9e2:	11 24       	eor	r1, r1
     9e4:	18 16       	cp	r1, r24
     9e6:	19 06       	cpc	r1, r25
     9e8:	8c f2       	brlt	.-94     	; 0x98c <ramp_blue+0x14>
     9ea:	e2 cf       	rjmp	.-60     	; 0x9b0 <ramp_blue+0x38>
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     9ec:	c0 e0       	ldi	r28, 0x00	; 0
     9ee:	d0 e0       	ldi	r29, 0x00	; 0
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, 0, j)); // Moderately bright green color.}
     9f0:	b7 01       	movw	r22, r14
     9f2:	a6 01       	movw	r20, r12
     9f4:	ce 01       	movw	r24, r28
     9f6:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     9fa:	21 96       	adiw	r28, 0x01	; 1
     9fc:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     a00:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     a04:	89 9f       	mul	r24, r25
     a06:	c0 01       	movw	r24, r0
     a08:	11 24       	eor	r1, r1
     a0a:	c8 17       	cp	r28, r24
     a0c:	d9 07       	cpc	r29, r25
     a0e:	84 f3       	brlt	.-32     	; 0x9f0 <ramp_blue+0x78>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, 0, j)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     a10:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     a14:	87 e8       	ldi	r24, 0x87	; 135
     a16:	93 e1       	ldi	r25, 0x13	; 19
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <ramp_blue+0xa0>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <ramp_blue+0xa6>
     a1e:	00 00       	nop
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	c9 1a       	sub	r12, r25
     a24:	d1 08       	sbc	r13, r1
     a26:	e1 08       	sbc	r14, r1
     a28:	f1 08       	sbc	r15, r1
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, 0, j)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
     a2a:	59 f0       	breq	.+22     	; 0xa42 <ramp_blue+0xca>
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     a2c:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     a30:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     a34:	89 9f       	mul	r24, r25
     a36:	c0 01       	movw	r24, r0
     a38:	11 24       	eor	r1, r1
     a3a:	18 16       	cp	r1, r24
     a3c:	19 06       	cpc	r1, r25
     a3e:	b4 f2       	brlt	.-84     	; 0x9ec <ramp_blue+0x74>
     a40:	e7 cf       	rjmp	.-50     	; 0xa10 <ramp_blue+0x98>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, 0, j)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <ramp_green>:

void ramp_green() {
     a50:	8f 92       	push	r8
     a52:	9f 92       	push	r9
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
             variable for later use or passed to the setPixelColor()
             function. Packed RGB format is predictable, regardless of
             LED strand color order.
  */
  static uint32_t   WS2812_Color_RGB(uint8_t r, uint8_t g, uint8_t b) {
    return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     a64:	c1 2c       	mov	r12, r1
     a66:	d1 2c       	mov	r13, r1
     a68:	76 01       	movw	r14, r12
     a6a:	23 c0       	rjmp	.+70     	; 0xab2 <ramp_green+0x62>
	for (int j = 0; j < 255; j++) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, j, 0)); // Moderately bright green color.}
     a6c:	b5 01       	movw	r22, r10
     a6e:	a4 01       	movw	r20, r8
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>
	}
}

void ramp_green() {
	for (int j = 0; j < 255; j++) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     a76:	21 96       	adiw	r28, 0x01	; 1
     a78:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     a7c:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     a80:	89 9f       	mul	r24, r25
     a82:	c0 01       	movw	r24, r0
     a84:	11 24       	eor	r1, r1
     a86:	c8 17       	cp	r28, r24
     a88:	d9 07       	cpc	r29, r25
     a8a:	84 f3       	brlt	.-32     	; 0xa6c <ramp_green+0x1c>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, j, 0)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     a8c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     a90:	87 e8       	ldi	r24, 0x87	; 135
     a92:	93 e1       	ldi	r25, 0x13	; 19
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <ramp_green+0x44>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <ramp_green+0x4a>
     a9a:	00 00       	nop
     a9c:	9f ef       	ldi	r25, 0xFF	; 255
     a9e:	c9 1a       	sub	r12, r25
     aa0:	d9 0a       	sbc	r13, r25
     aa2:	e9 0a       	sbc	r14, r25
     aa4:	f9 0a       	sbc	r15, r25
		_delay_ms(1);
	}
}

void ramp_green() {
	for (int j = 0; j < 255; j++) {
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	c8 16       	cp	r12, r24
     aaa:	d1 04       	cpc	r13, r1
     aac:	e1 04       	cpc	r14, r1
     aae:	f1 04       	cpc	r15, r1
     ab0:	79 f1       	breq	.+94     	; 0xb10 <ramp_green+0xc0>
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     ab2:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     ab6:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     aba:	89 9f       	mul	r24, r25
     abc:	c0 01       	movw	r24, r0
     abe:	11 24       	eor	r1, r1
     ac0:	18 16       	cp	r1, r24
     ac2:	19 06       	cpc	r1, r25
     ac4:	1c f7       	brge	.-58     	; 0xa8c <ramp_green+0x3c>
     ac6:	88 24       	eor	r8, r8
     ac8:	9c 2c       	mov	r9, r12
     aca:	ad 2c       	mov	r10, r13
     acc:	be 2c       	mov	r11, r14
     ace:	c0 e0       	ldi	r28, 0x00	; 0
     ad0:	d0 e0       	ldi	r29, 0x00	; 0
     ad2:	cc cf       	rjmp	.-104    	; 0xa6c <ramp_green+0x1c>
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, j, 0)); // Moderately bright green color.}
     ad4:	b5 01       	movw	r22, r10
     ad6:	a4 01       	movw	r20, r8
     ad8:	ce 01       	movw	r24, r28
     ada:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     ade:	21 96       	adiw	r28, 0x01	; 1
     ae0:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     ae4:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     ae8:	89 9f       	mul	r24, r25
     aea:	c0 01       	movw	r24, r0
     aec:	11 24       	eor	r1, r1
     aee:	c8 17       	cp	r28, r24
     af0:	d9 07       	cpc	r29, r25
     af2:	84 f3       	brlt	.-32     	; 0xad4 <ramp_green+0x84>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, j, 0)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     af4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     af8:	87 e8       	ldi	r24, 0x87	; 135
     afa:	93 e1       	ldi	r25, 0x13	; 19
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <ramp_green+0xac>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <ramp_green+0xb2>
     b02:	00 00       	nop
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	c9 1a       	sub	r12, r25
     b08:	d1 08       	sbc	r13, r1
     b0a:	e1 08       	sbc	r14, r1
     b0c:	f1 08       	sbc	r15, r1
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, j, 0)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
     b0e:	89 f0       	breq	.+34     	; 0xb32 <ramp_green+0xe2>
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     b10:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     b14:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     b18:	89 9f       	mul	r24, r25
     b1a:	c0 01       	movw	r24, r0
     b1c:	11 24       	eor	r1, r1
     b1e:	18 16       	cp	r1, r24
     b20:	19 06       	cpc	r1, r25
     b22:	44 f7       	brge	.-48     	; 0xaf4 <ramp_green+0xa4>
     b24:	88 24       	eor	r8, r8
     b26:	9c 2c       	mov	r9, r12
     b28:	ad 2c       	mov	r10, r13
     b2a:	be 2c       	mov	r11, r14
     b2c:	c0 e0       	ldi	r28, 0x00	; 0
     b2e:	d0 e0       	ldi	r29, 0x00	; 0
     b30:	d1 cf       	rjmp	.-94     	; 0xad4 <ramp_green+0x84>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(0, j, 0)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	bf 90       	pop	r11
     b40:	af 90       	pop	r10
     b42:	9f 90       	pop	r9
     b44:	8f 90       	pop	r8
     b46:	08 95       	ret

00000b48 <ramp_red>:

void ramp_red() {
     b48:	8f 92       	push	r8
     b4a:	9f 92       	push	r9
     b4c:	af 92       	push	r10
     b4e:	bf 92       	push	r11
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	c1 2c       	mov	r12, r1
     b5e:	d1 2c       	mov	r13, r1
     b60:	76 01       	movw	r14, r12
     b62:	23 c0       	rjmp	.+70     	; 0xbaa <ramp_red+0x62>
	for (int j = 0; j < 255; j++) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
		WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, 0, 0)); // Moderately bright green color.}
     b64:	b5 01       	movw	r22, r10
     b66:	a4 01       	movw	r20, r8
     b68:	ce 01       	movw	r24, r28
     b6a:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>
	}
}

void ramp_red() {
	for (int j = 0; j < 255; j++) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     b6e:	21 96       	adiw	r28, 0x01	; 1
     b70:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     b74:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     b78:	89 9f       	mul	r24, r25
     b7a:	c0 01       	movw	r24, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	c8 17       	cp	r28, r24
     b80:	d9 07       	cpc	r29, r25
     b82:	84 f3       	brlt	.-32     	; 0xb64 <ramp_red+0x1c>
		WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, 0, 0)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     b84:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     b88:	87 e8       	ldi	r24, 0x87	; 135
     b8a:	93 e1       	ldi	r25, 0x13	; 19
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <ramp_red+0x44>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <ramp_red+0x4a>
     b92:	00 00       	nop
     b94:	9f ef       	ldi	r25, 0xFF	; 255
     b96:	c9 1a       	sub	r12, r25
     b98:	d9 0a       	sbc	r13, r25
     b9a:	e9 0a       	sbc	r14, r25
     b9c:	f9 0a       	sbc	r15, r25
		_delay_ms(1);
	}
}

void ramp_red() {
	for (int j = 0; j < 255; j++) {
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	c8 16       	cp	r12, r24
     ba2:	d1 04       	cpc	r13, r1
     ba4:	e1 04       	cpc	r14, r1
     ba6:	f1 04       	cpc	r15, r1
     ba8:	71 f1       	breq	.+92     	; 0xc06 <ramp_red+0xbe>
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     baa:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     bae:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     bb2:	89 9f       	mul	r24, r25
     bb4:	c0 01       	movw	r24, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	18 16       	cp	r1, r24
     bba:	19 06       	cpc	r1, r25
     bbc:	1c f7       	brge	.-58     	; 0xb84 <ramp_red+0x3c>
     bbe:	56 01       	movw	r10, r12
     bc0:	99 24       	eor	r9, r9
     bc2:	88 24       	eor	r8, r8
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
     bc6:	d0 e0       	ldi	r29, 0x00	; 0
     bc8:	cd cf       	rjmp	.-102    	; 0xb64 <ramp_red+0x1c>
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, 0, 0)); // Moderately bright green color.}
     bca:	b5 01       	movw	r22, r10
     bcc:	a4 01       	movw	r20, r8
     bce:	ce 01       	movw	r24, r28
     bd0:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     bd4:	21 96       	adiw	r28, 0x01	; 1
     bd6:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     bda:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     bde:	89 9f       	mul	r24, r25
     be0:	c0 01       	movw	r24, r0
     be2:	11 24       	eor	r1, r1
     be4:	c8 17       	cp	r28, r24
     be6:	d9 07       	cpc	r29, r25
     be8:	84 f3       	brlt	.-32     	; 0xbca <ramp_red+0x82>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, 0, 0)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     bea:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     bee:	87 e8       	ldi	r24, 0x87	; 135
     bf0:	93 e1       	ldi	r25, 0x13	; 19
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <ramp_red+0xaa>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <ramp_red+0xb0>
     bf8:	00 00       	nop
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	c9 1a       	sub	r12, r25
     bfe:	d1 08       	sbc	r13, r1
     c00:	e1 08       	sbc	r14, r1
     c02:	f1 08       	sbc	r15, r1
		WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, 0, 0)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
     c04:	81 f0       	breq	.+32     	; 0xc26 <ramp_red+0xde>
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     c06:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     c0a:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     c0e:	89 9f       	mul	r24, r25
     c10:	c0 01       	movw	r24, r0
     c12:	11 24       	eor	r1, r1
     c14:	18 16       	cp	r1, r24
     c16:	19 06       	cpc	r1, r25
     c18:	44 f7       	brge	.-48     	; 0xbea <ramp_red+0xa2>
     c1a:	56 01       	movw	r10, r12
     c1c:	99 24       	eor	r9, r9
     c1e:	88 24       	eor	r8, r8
     c20:	c0 e0       	ldi	r28, 0x00	; 0
     c22:	d0 e0       	ldi	r29, 0x00	; 0
     c24:	d2 cf       	rjmp	.-92     	; 0xbca <ramp_red+0x82>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, 0, 0)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
}
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	bf 90       	pop	r11
     c34:	af 90       	pop	r10
     c36:	9f 90       	pop	r9
     c38:	8f 90       	pop	r8
     c3a:	08 95       	ret

00000c3c <ramp_white>:

void ramp_white() {
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	c1 2c       	mov	r12, r1
     c52:	d1 2c       	mov	r13, r1
     c54:	76 01       	movw	r14, r12
     c56:	23 c0       	rjmp	.+70     	; 0xc9e <ramp_white+0x62>
	for (int j = 0; j < 255; j++) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, j, j)); // Moderately bright green color.}
     c58:	b5 01       	movw	r22, r10
     c5a:	a4 01       	movw	r20, r8
     c5c:	ce 01       	movw	r24, r28
     c5e:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>
	}
}

void ramp_white() {
	for (int j = 0; j < 255; j++) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     c62:	21 96       	adiw	r28, 0x01	; 1
     c64:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     c68:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     c6c:	89 9f       	mul	r24, r25
     c6e:	c0 01       	movw	r24, r0
     c70:	11 24       	eor	r1, r1
     c72:	c8 17       	cp	r28, r24
     c74:	d9 07       	cpc	r29, r25
     c76:	84 f3       	brlt	.-32     	; 0xc58 <ramp_white+0x1c>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, j, j)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     c78:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     c7c:	87 e8       	ldi	r24, 0x87	; 135
     c7e:	93 e1       	ldi	r25, 0x13	; 19
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <ramp_white+0x44>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <ramp_white+0x4a>
     c86:	00 00       	nop
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	c9 1a       	sub	r12, r25
     c8c:	d9 0a       	sbc	r13, r25
     c8e:	e9 0a       	sbc	r14, r25
     c90:	f9 0a       	sbc	r15, r25
		_delay_ms(1);
	}
}

void ramp_white() {
	for (int j = 0; j < 255; j++) {
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	c8 16       	cp	r12, r24
     c96:	d1 04       	cpc	r13, r1
     c98:	e1 04       	cpc	r14, r1
     c9a:	f1 04       	cpc	r15, r1
     c9c:	d1 f1       	breq	.+116    	; 0xd12 <ramp_white+0xd6>
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     c9e:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     ca2:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     ca6:	89 9f       	mul	r24, r25
     ca8:	c0 01       	movw	r24, r0
     caa:	11 24       	eor	r1, r1
     cac:	18 16       	cp	r1, r24
     cae:	19 06       	cpc	r1, r25
     cb0:	1c f7       	brge	.-58     	; 0xc78 <ramp_white+0x3c>
     cb2:	56 01       	movw	r10, r12
     cb4:	99 24       	eor	r9, r9
     cb6:	88 24       	eor	r8, r8
     cb8:	be 2d       	mov	r27, r14
     cba:	ad 2d       	mov	r26, r13
     cbc:	9c 2d       	mov	r25, r12
     cbe:	88 27       	eor	r24, r24
     cc0:	88 2a       	or	r8, r24
     cc2:	99 2a       	or	r9, r25
     cc4:	aa 2a       	or	r10, r26
     cc6:	bb 2a       	or	r11, r27
     cc8:	8c 28       	or	r8, r12
     cca:	9d 28       	or	r9, r13
     ccc:	ae 28       	or	r10, r14
     cce:	bf 28       	or	r11, r15
     cd0:	c0 e0       	ldi	r28, 0x00	; 0
     cd2:	d0 e0       	ldi	r29, 0x00	; 0
     cd4:	c1 cf       	rjmp	.-126    	; 0xc58 <ramp_white+0x1c>
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, j, j)); // Moderately bright green color.}
     cd6:	b5 01       	movw	r22, r10
     cd8:	a4 01       	movw	r20, r8
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 24 09 	call	0x1248	; 0x1248 <WS2812_set_pixel_color_C>
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     ce0:	21 96       	adiw	r28, 0x01	; 1
     ce2:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <num_groups>
     ce6:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <num_leds_per_group>
     cea:	89 9f       	mul	r24, r25
     cec:	c0 01       	movw	r24, r0
     cee:	11 24       	eor	r1, r1
     cf0:	c8 17       	cp	r28, r24
     cf2:	d9 07       	cpc	r29, r25
     cf4:	84 f3       	brlt	.-32     	; 0xcd6 <ramp_white+0x9a>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, j, j)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
     cf6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     cfa:	87 e8       	ldi	r24, 0x87	; 135
     cfc:	93 e1       	ldi	r25, 0x13	; 19
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <ramp_white+0xc2>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <ramp_white+0xc8>
     d04:	00 00       	nop
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	c9 1a       	sub	r12, r25
     d0a:	d1 08       	sbc	r13, r1
     d0c:	e1 08       	sbc	r14, r1
     d0e:	f1 08       	sbc	r15, r1
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, j, j)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
	for (int j = 255; j > 0; j--) {
     d10:	e1 f0       	breq	.+56     	; 0xd4a <ramp_white+0x10e>
		for (int i = 0; i < num_groups * num_leds_per_group; i++) {
     d12:	80 91 64 3c 	lds	r24, 0x3C64	; 0x803c64 <num_leds_per_group>
     d16:	90 91 65 3c 	lds	r25, 0x3C65	; 0x803c65 <num_groups>
     d1a:	89 9f       	mul	r24, r25
     d1c:	c0 01       	movw	r24, r0
     d1e:	11 24       	eor	r1, r1
     d20:	18 16       	cp	r1, r24
     d22:	19 06       	cpc	r1, r25
     d24:	44 f7       	brge	.-48     	; 0xcf6 <ramp_white+0xba>
     d26:	56 01       	movw	r10, r12
     d28:	99 24       	eor	r9, r9
     d2a:	88 24       	eor	r8, r8
     d2c:	be 2d       	mov	r27, r14
     d2e:	ad 2d       	mov	r26, r13
     d30:	9c 2d       	mov	r25, r12
     d32:	88 27       	eor	r24, r24
     d34:	88 2a       	or	r8, r24
     d36:	99 2a       	or	r9, r25
     d38:	aa 2a       	or	r10, r26
     d3a:	bb 2a       	or	r11, r27
     d3c:	8c 28       	or	r8, r12
     d3e:	9d 28       	or	r9, r13
     d40:	ae 28       	or	r10, r14
     d42:	bf 28       	or	r11, r15
     d44:	c0 e0       	ldi	r28, 0x00	; 0
     d46:	d0 e0       	ldi	r29, 0x00	; 0
     d48:	c6 cf       	rjmp	.-116    	; 0xcd6 <ramp_white+0x9a>
			WS2812_set_pixel_color_C(i, WS2812_Color_RGB(j, j, j)); // Moderately bright green color.}
		}
		WS2812_show(); // This sends the updated pixel color to the hardware.
		_delay_ms(1);
	}
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	df 90       	pop	r13
     d54:	cf 90       	pop	r12
     d56:	bf 90       	pop	r11
     d58:	af 90       	pop	r10
     d5a:	9f 90       	pop	r9
     d5c:	8f 90       	pop	r8
     d5e:	08 95       	ret

00000d60 <snake_rgb>:

void snake_rgb() {
     d60:	2f 92       	push	r2
     d62:	3f 92       	push	r3
     d64:	4f 92       	push	r4
     d66:	5f 92       	push	r5
     d68:	6f 92       	push	r6
     d6a:	7f 92       	push	r7
     d6c:	8f 92       	push	r8
     d6e:	9f 92       	push	r9
     d70:	af 92       	push	r10
     d72:	bf 92       	push	r11
     d74:	cf 92       	push	r12
     d76:	df 92       	push	r13
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	a6 97       	sbiw	r28, 0x26	; 38
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	de bf       	out	0x3e, r29	; 62
	uint16_t num_leds = num_groups * num_leds_per_group;
     d8e:	90 91 65 3c 	lds	r25, 0x3C65	; 0x803c65 <num_groups>
     d92:	80 91 64 3c 	lds	r24, 0x3C64	; 0x803c64 <num_leds_per_group>
     d96:	98 9f       	mul	r25, r24
     d98:	90 01       	movw	r18, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	29 a3       	std	Y+33, r18	; 0x21
     d9e:	3a a3       	std	Y+34, r19	; 0x22
     da0:	2b a3       	std	Y+35, r18	; 0x23
     da2:	3c a3       	std	Y+36, r19	; 0x24
	for (int16_t i = 0; i < num_leds; i++) {
     da4:	23 2b       	or	r18, r19
     da6:	09 f4       	brne	.+2      	; 0xdaa <snake_rgb+0x4a>
     da8:	62 c1       	rjmp	.+708    	; 0x106e <snake_rgb+0x30e>
     daa:	4e ef       	ldi	r20, 0xFE	; 254
     dac:	5f ef       	ldi	r21, 0xFF	; 255
     dae:	4f 83       	std	Y+7, r20	; 0x07
     db0:	58 87       	std	Y+8, r21	; 0x08
     db2:	8d ef       	ldi	r24, 0xFD	; 253
     db4:	9f ef       	ldi	r25, 0xFF	; 255
     db6:	8d 83       	std	Y+5, r24	; 0x05
     db8:	9e 83       	std	Y+6, r25	; 0x06
     dba:	2c ef       	ldi	r18, 0xFC	; 252
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	2b 83       	std	Y+3, r18	; 0x03
     dc0:	3c 83       	std	Y+4, r19	; 0x04
     dc2:	4b ef       	ldi	r20, 0xFB	; 251
     dc4:	5f ef       	ldi	r21, 0xFF	; 255
     dc6:	49 83       	std	Y+1, r20	; 0x01
     dc8:	5a 83       	std	Y+2, r21	; 0x02
     dca:	0f 2e       	mov	r0, r31
     dcc:	fa ef       	ldi	r31, 0xFA	; 250
     dce:	2f 2e       	mov	r2, r31
     dd0:	33 24       	eor	r3, r3
     dd2:	3a 94       	dec	r3
     dd4:	f0 2d       	mov	r31, r0
     dd6:	0f 2e       	mov	r0, r31
     dd8:	f9 ef       	ldi	r31, 0xF9	; 249
     dda:	4f 2e       	mov	r4, r31
     ddc:	55 24       	eor	r5, r5
     dde:	5a 94       	dec	r5
     de0:	f0 2d       	mov	r31, r0
     de2:	0f 2e       	mov	r0, r31
     de4:	f8 ef       	ldi	r31, 0xF8	; 248
     de6:	6f 2e       	mov	r6, r31
     de8:	77 24       	eor	r7, r7
     dea:	7a 94       	dec	r7
     dec:	f0 2d       	mov	r31, r0
     dee:	0f 2e       	mov	r0, r31
     df0:	f7 ef       	ldi	r31, 0xF7	; 247
     df2:	8f 2e       	mov	r8, r31
     df4:	99 24       	eor	r9, r9
     df6:	9a 94       	dec	r9
     df8:	f0 2d       	mov	r31, r0
     dfa:	0f 2e       	mov	r0, r31
     dfc:	f6 ef       	ldi	r31, 0xF6	; 246
     dfe:	af 2e       	mov	r10, r31
     e00:	bb 24       	eor	r11, r11
     e02:	ba 94       	dec	r11
     e04:	f0 2d       	mov	r31, r0
     e06:	0f 2e       	mov	r0, r31
     e08:	f5 ef       	ldi	r31, 0xF5	; 245
     e0a:	cf 2e       	mov	r12, r31
     e0c:	dd 24       	eor	r13, r13
     e0e:	da 94       	dec	r13
     e10:	f0 2d       	mov	r31, r0
     e12:	0f 2e       	mov	r0, r31
     e14:	f4 ef       	ldi	r31, 0xF4	; 244
     e16:	ef 2e       	mov	r14, r31
     e18:	ff 24       	eor	r15, r15
     e1a:	fa 94       	dec	r15
     e1c:	f0 2d       	mov	r31, r0
     e1e:	0f ef       	ldi	r16, 0xFF	; 255
     e20:	1f ef       	ldi	r17, 0xFF	; 255
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	8d a3       	std	Y+37, r24	; 0x25
     e28:	9e a3       	std	Y+38, r25	; 0x26
     e2a:	8d a1       	ldd	r24, Y+37	; 0x25
     e2c:	9e a1       	ldd	r25, Y+38	; 0x26
		int16_t red_led_num = i;
		int16_t orange_led_num = (i - 1) < 0 ? num_leds + (i - 1) : i - 1;
     e2e:	09 87       	std	Y+9, r16	; 0x09
     e30:	1a 87       	std	Y+10, r17	; 0x0a
     e32:	11 23       	and	r17, r17
     e34:	34 f4       	brge	.+12     	; 0xe42 <snake_rgb+0xe2>
     e36:	2b a1       	ldd	r18, Y+35	; 0x23
     e38:	3c a1       	ldd	r19, Y+36	; 0x24
     e3a:	20 0f       	add	r18, r16
     e3c:	31 1f       	adc	r19, r17
     e3e:	29 87       	std	Y+9, r18	; 0x09
     e40:	3a 87       	std	Y+10, r19	; 0x0a
		int16_t yellow_led_num = (i - 2) < 0 ? num_leds + (i - 2) : i - 2;
     e42:	4f 81       	ldd	r20, Y+7	; 0x07
     e44:	58 85       	ldd	r21, Y+8	; 0x08
     e46:	4b 87       	std	Y+11, r20	; 0x0b
     e48:	5c 87       	std	Y+12, r21	; 0x0c
     e4a:	55 23       	and	r21, r21
     e4c:	34 f4       	brge	.+12     	; 0xe5a <snake_rgb+0xfa>
     e4e:	2b a1       	ldd	r18, Y+35	; 0x23
     e50:	3c a1       	ldd	r19, Y+36	; 0x24
     e52:	24 0f       	add	r18, r20
     e54:	35 1f       	adc	r19, r21
     e56:	2b 87       	std	Y+11, r18	; 0x0b
     e58:	3c 87       	std	Y+12, r19	; 0x0c
		int16_t spring_green_led_num = (i - 3) < 0 ? num_leds + (i - 3) : i - 3;
     e5a:	4d 81       	ldd	r20, Y+5	; 0x05
     e5c:	5e 81       	ldd	r21, Y+6	; 0x06
     e5e:	4d 87       	std	Y+13, r20	; 0x0d
     e60:	5e 87       	std	Y+14, r21	; 0x0e
     e62:	55 23       	and	r21, r21
     e64:	34 f4       	brge	.+12     	; 0xe72 <snake_rgb+0x112>
     e66:	2b a1       	ldd	r18, Y+35	; 0x23
     e68:	3c a1       	ldd	r19, Y+36	; 0x24
     e6a:	24 0f       	add	r18, r20
     e6c:	35 1f       	adc	r19, r21
     e6e:	2d 87       	std	Y+13, r18	; 0x0d
     e70:	3e 87       	std	Y+14, r19	; 0x0e
		int16_t green_led_num = (i - 4) < 0 ? num_leds + (i - 4) : i - 4;
     e72:	4b 81       	ldd	r20, Y+3	; 0x03
     e74:	5c 81       	ldd	r21, Y+4	; 0x04
     e76:	4f 87       	std	Y+15, r20	; 0x0f
     e78:	58 8b       	std	Y+16, r21	; 0x10
     e7a:	55 23       	and	r21, r21
     e7c:	34 f4       	brge	.+12     	; 0xe8a <snake_rgb+0x12a>
     e7e:	2b a1       	ldd	r18, Y+35	; 0x23
     e80:	3c a1       	ldd	r19, Y+36	; 0x24
     e82:	24 0f       	add	r18, r20
     e84:	35 1f       	adc	r19, r21
     e86:	2f 87       	std	Y+15, r18	; 0x0f
     e88:	38 8b       	std	Y+16, r19	; 0x10
		int16_t turquoise_led_num = (i - 5) < 0 ? num_leds + (i - 5) : i - 5;
     e8a:	49 81       	ldd	r20, Y+1	; 0x01
     e8c:	5a 81       	ldd	r21, Y+2	; 0x02
     e8e:	49 8b       	std	Y+17, r20	; 0x11
     e90:	5a 8b       	std	Y+18, r21	; 0x12
     e92:	55 23       	and	r21, r21
     e94:	34 f4       	brge	.+12     	; 0xea2 <snake_rgb+0x142>
     e96:	2b a1       	ldd	r18, Y+35	; 0x23
     e98:	3c a1       	ldd	r19, Y+36	; 0x24
     e9a:	24 0f       	add	r18, r20
     e9c:	35 1f       	adc	r19, r21
     e9e:	29 8b       	std	Y+17, r18	; 0x11
     ea0:	3a 8b       	std	Y+18, r19	; 0x12
		int16_t cyan_led_num = (i - 6) < 0 ? num_leds + (i - 6) : i - 6;
     ea2:	2b 8a       	std	Y+19, r2	; 0x13
     ea4:	3c 8a       	std	Y+20, r3	; 0x14
     ea6:	33 20       	and	r3, r3
     ea8:	34 f4       	brge	.+12     	; 0xeb6 <snake_rgb+0x156>
     eaa:	4b a1       	ldd	r20, Y+35	; 0x23
     eac:	5c a1       	ldd	r21, Y+36	; 0x24
     eae:	42 0d       	add	r20, r2
     eb0:	53 1d       	adc	r21, r3
     eb2:	4b 8b       	std	Y+19, r20	; 0x13
     eb4:	5c 8b       	std	Y+20, r21	; 0x14
		int16_t ocean_led_num = (i - 7) < 0 ? num_leds + (i - 7) : i - 7;
     eb6:	4d 8a       	std	Y+21, r4	; 0x15
     eb8:	5e 8a       	std	Y+22, r5	; 0x16
     eba:	55 20       	and	r5, r5
     ebc:	34 f4       	brge	.+12     	; 0xeca <snake_rgb+0x16a>
     ebe:	2b a1       	ldd	r18, Y+35	; 0x23
     ec0:	3c a1       	ldd	r19, Y+36	; 0x24
     ec2:	24 0d       	add	r18, r4
     ec4:	35 1d       	adc	r19, r5
     ec6:	2d 8b       	std	Y+21, r18	; 0x15
     ec8:	3e 8b       	std	Y+22, r19	; 0x16
		int16_t blue_led_num = (i - 8) < 0 ? num_leds + (i - 8) : i - 8;
     eca:	6f 8a       	std	Y+23, r6	; 0x17
     ecc:	78 8e       	std	Y+24, r7	; 0x18
     ece:	77 20       	and	r7, r7
     ed0:	34 f4       	brge	.+12     	; 0xede <snake_rgb+0x17e>
     ed2:	4b a1       	ldd	r20, Y+35	; 0x23
     ed4:	5c a1       	ldd	r21, Y+36	; 0x24
     ed6:	46 0d       	add	r20, r6
     ed8:	57 1d       	adc	r21, r7
     eda:	4f 8b       	std	Y+23, r20	; 0x17
     edc:	58 8f       	std	Y+24, r21	; 0x18
		int16_t violet_led_num = (i - 9) < 0 ? num_leds + (i - 9) : i - 9;
     ede:	89 8e       	std	Y+25, r8	; 0x19
     ee0:	9a 8e       	std	Y+26, r9	; 0x1a
     ee2:	99 20       	and	r9, r9
     ee4:	34 f4       	brge	.+12     	; 0xef2 <snake_rgb+0x192>
     ee6:	2b a1       	ldd	r18, Y+35	; 0x23
     ee8:	3c a1       	ldd	r19, Y+36	; 0x24
     eea:	28 0d       	add	r18, r8
     eec:	39 1d       	adc	r19, r9
     eee:	29 8f       	std	Y+25, r18	; 0x19
     ef0:	3a 8f       	std	Y+26, r19	; 0x1a
		int16_t magenta_led_num = (i - 10) < 0 ? num_leds + (i - 10) : i - 10;
     ef2:	ab 8e       	std	Y+27, r10	; 0x1b
     ef4:	bc 8e       	std	Y+28, r11	; 0x1c
     ef6:	bb 20       	and	r11, r11
     ef8:	34 f4       	brge	.+12     	; 0xf06 <snake_rgb+0x1a6>
     efa:	4b a1       	ldd	r20, Y+35	; 0x23
     efc:	5c a1       	ldd	r21, Y+36	; 0x24
     efe:	4a 0d       	add	r20, r10
     f00:	5b 1d       	adc	r21, r11
     f02:	4b 8f       	std	Y+27, r20	; 0x1b
     f04:	5c 8f       	std	Y+28, r21	; 0x1c
		int16_t raspberry_led_num = (i - 11) < 0 ? num_leds + (i - 11) : i - 11;
     f06:	cd 8e       	std	Y+29, r12	; 0x1d
     f08:	de 8e       	std	Y+30, r13	; 0x1e
     f0a:	dd 20       	and	r13, r13
     f0c:	34 f4       	brge	.+12     	; 0xf1a <snake_rgb+0x1ba>
     f0e:	2b a1       	ldd	r18, Y+35	; 0x23
     f10:	3c a1       	ldd	r19, Y+36	; 0x24
     f12:	2c 0d       	add	r18, r12
     f14:	3d 1d       	adc	r19, r13
     f16:	2d 8f       	std	Y+29, r18	; 0x1d
     f18:	3e 8f       	std	Y+30, r19	; 0x1e
		int16_t clear_led_num = (i - 12) < 0 ? num_leds + (i - 12) : i - 12;
     f1a:	ef 8e       	std	Y+31, r14	; 0x1f
     f1c:	f8 a2       	std	Y+32, r15	; 0x20
     f1e:	ff 20       	and	r15, r15
     f20:	34 f4       	brge	.+12     	; 0xf2e <snake_rgb+0x1ce>
     f22:	4b a1       	ldd	r20, Y+35	; 0x23
     f24:	5c a1       	ldd	r21, Y+36	; 0x24
     f26:	4e 0d       	add	r20, r14
     f28:	5f 1d       	adc	r21, r15
     f2a:	4f 8f       	std	Y+31, r20	; 0x1f
     f2c:	58 a3       	std	Y+32, r21	; 0x20
		WS2812_set_pixel_color_RGB(red_led_num, 255, 0, 0);
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	6f ef       	ldi	r22, 0xFF	; 255
     f34:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(orange_led_num, 255, 125, 0);
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	4d e7       	ldi	r20, 0x7D	; 125
     f3c:	6f ef       	ldi	r22, 0xFF	; 255
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(yellow_led_num, 255, 255, 0);
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	4f ef       	ldi	r20, 0xFF	; 255
     f4a:	6f ef       	ldi	r22, 0xFF	; 255
     f4c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f4e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f50:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(spring_green_led_num, 125, 255, 0);
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	4f ef       	ldi	r20, 0xFF	; 255
     f58:	6d e7       	ldi	r22, 0x7D	; 125
     f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(green_led_num, 0, 255, 0);
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	4f ef       	ldi	r20, 0xFF	; 255
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6a:	98 89       	ldd	r25, Y+16	; 0x10
     f6c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(turquoise_led_num, 0, 255, 125);
     f70:	2d e7       	ldi	r18, 0x7D	; 125
     f72:	4f ef       	ldi	r20, 0xFF	; 255
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	89 89       	ldd	r24, Y+17	; 0x11
     f78:	9a 89       	ldd	r25, Y+18	; 0x12
     f7a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(cyan_led_num, 0, 255, 255);
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	4f ef       	ldi	r20, 0xFF	; 255
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	8b 89       	ldd	r24, Y+19	; 0x13
     f86:	9c 89       	ldd	r25, Y+20	; 0x14
     f88:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(ocean_led_num, 0, 125, 255);
     f8c:	2f ef       	ldi	r18, 0xFF	; 255
     f8e:	4d e7       	ldi	r20, 0x7D	; 125
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	8d 89       	ldd	r24, Y+21	; 0x15
     f94:	9e 89       	ldd	r25, Y+22	; 0x16
     f96:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(blue_led_num, 0, 0, 255);
     f9a:	2f ef       	ldi	r18, 0xFF	; 255
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(violet_led_num, 125, 0, 255);
     fa8:	2f ef       	ldi	r18, 0xFF	; 255
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	6d e7       	ldi	r22, 0x7D	; 125
     fae:	89 8d       	ldd	r24, Y+25	; 0x19
     fb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fb2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(magenta_led_num, 255, 0, 255);
     fb6:	2f ef       	ldi	r18, 0xFF	; 255
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	6f ef       	ldi	r22, 0xFF	; 255
     fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(raspberry_led_num, 255, 0, 125);
     fc4:	2d e7       	ldi	r18, 0x7D	; 125
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	6f ef       	ldi	r22, 0xFF	; 255
     fca:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fce:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_set_pixel_color_RGB(clear_led_num, 0, 0, 0);
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fda:	98 a1       	ldd	r25, Y+32	; 0x20
     fdc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <WS2812_set_pixel_color_RGB>
		WS2812_show();
     fe0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <WS2812_show>
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	8d e0       	ldi	r24, 0x0D	; 13
     fe8:	93 e0       	ldi	r25, 0x03	; 3
     fea:	51 50       	subi	r21, 0x01	; 1
     fec:	80 40       	sbci	r24, 0x00	; 0
     fee:	90 40       	sbci	r25, 0x00	; 0
     ff0:	e1 f7       	brne	.-8      	; 0xfea <snake_rgb+0x28a>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <snake_rgb+0x294>
     ff4:	00 00       	nop
	}
}

void snake_rgb() {
	uint16_t num_leds = num_groups * num_leds_per_group;
	for (int16_t i = 0; i < num_leds; i++) {
     ff6:	2d a1       	ldd	r18, Y+37	; 0x25
     ff8:	3e a1       	ldd	r19, Y+38	; 0x26
     ffa:	2f 5f       	subi	r18, 0xFF	; 255
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
     ffe:	2d a3       	std	Y+37, r18	; 0x25
    1000:	3e a3       	std	Y+38, r19	; 0x26
    1002:	0f 5f       	subi	r16, 0xFF	; 255
    1004:	1f 4f       	sbci	r17, 0xFF	; 255
    1006:	3f ef       	ldi	r19, 0xFF	; 255
    1008:	e3 1a       	sub	r14, r19
    100a:	f3 0a       	sbc	r15, r19
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	c4 1a       	sub	r12, r20
    1010:	d4 0a       	sbc	r13, r20
    1012:	5f ef       	ldi	r21, 0xFF	; 255
    1014:	a5 1a       	sub	r10, r21
    1016:	b5 0a       	sbc	r11, r21
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	88 1a       	sub	r8, r24
    101c:	98 0a       	sbc	r9, r24
    101e:	9f ef       	ldi	r25, 0xFF	; 255
    1020:	69 1a       	sub	r6, r25
    1022:	79 0a       	sbc	r7, r25
    1024:	2f ef       	ldi	r18, 0xFF	; 255
    1026:	42 1a       	sub	r4, r18
    1028:	52 0a       	sbc	r5, r18
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	23 1a       	sub	r2, r19
    102e:	33 0a       	sbc	r3, r19
    1030:	49 81       	ldd	r20, Y+1	; 0x01
    1032:	5a 81       	ldd	r21, Y+2	; 0x02
    1034:	4f 5f       	subi	r20, 0xFF	; 255
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	49 83       	std	Y+1, r20	; 0x01
    103a:	5a 83       	std	Y+2, r21	; 0x02
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	8b 83       	std	Y+3, r24	; 0x03
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	2d 81       	ldd	r18, Y+5	; 0x05
    1048:	3e 81       	ldd	r19, Y+6	; 0x06
    104a:	2f 5f       	subi	r18, 0xFF	; 255
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	2d 83       	std	Y+5, r18	; 0x05
    1050:	3e 83       	std	Y+6, r19	; 0x06
    1052:	4f 81       	ldd	r20, Y+7	; 0x07
    1054:	58 85       	ldd	r21, Y+8	; 0x08
    1056:	4f 5f       	subi	r20, 0xFF	; 255
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
    105a:	4f 83       	std	Y+7, r20	; 0x07
    105c:	58 87       	std	Y+8, r21	; 0x08
    105e:	89 a1       	ldd	r24, Y+33	; 0x21
    1060:	9a a1       	ldd	r25, Y+34	; 0x22
    1062:	2d a1       	ldd	r18, Y+37	; 0x25
    1064:	3e a1       	ldd	r19, Y+38	; 0x26
    1066:	82 17       	cp	r24, r18
    1068:	93 07       	cpc	r25, r19
    106a:	09 f0       	breq	.+2      	; 0x106e <snake_rgb+0x30e>
    106c:	de ce       	rjmp	.-580    	; 0xe2a <snake_rgb+0xca>
		WS2812_set_pixel_color_RGB(raspberry_led_num, 255, 0, 125);
		WS2812_set_pixel_color_RGB(clear_led_num, 0, 0, 0);
		WS2812_show();
		_delay_ms(50);
	}
}
    106e:	a6 96       	adiw	r28, 0x26	; 38
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	bf 90       	pop	r11
    1086:	af 90       	pop	r10
    1088:	9f 90       	pop	r9
    108a:	8f 90       	pop	r8
    108c:	7f 90       	pop	r7
    108e:	6f 90       	pop	r6
    1090:	5f 90       	pop	r5
    1092:	4f 90       	pop	r4
    1094:	3f 90       	pop	r3
    1096:	2f 90       	pop	r2
    1098:	08 95       	ret

0000109a <ws2812_run_all_tests>:


// Must first initialize driver before running this function
void ws2812_run_all_tests(uint8_t numGroups, uint8_t numLedsPerGroup, uint8_t degreeSpacing) {
	num_groups = numGroups;
    109a:	80 93 65 3c 	sts	0x3C65, r24	; 0x803c65 <num_groups>
	num_leds_per_group = numLedsPerGroup;
    109e:	60 93 64 3c 	sts	0x3C64, r22	; 0x803c64 <num_leds_per_group>
	degree_spacing = degreeSpacing;
    10a2:	40 93 63 3c 	sts	0x3C63, r20	; 0x803c63 <degree_spacing>
	
	ramp_blue();
    10a6:	0e 94 bc 04 	call	0x978	; 0x978 <ramp_blue>
	ramp_green();
    10aa:	0e 94 28 05 	call	0xa50	; 0xa50 <ramp_green>
	ramp_red();
    10ae:	0e 94 a4 05 	call	0xb48	; 0xb48 <ramp_red>
	ramp_white();
    10b2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <ramp_white>
	full_rl_rainbow();
    10b6:	0e 94 36 04 	call	0x86c	; 0x86c <full_rl_rainbow>
	full_rl_rainbow();
    10ba:	0e 94 36 04 	call	0x86c	; 0x86c <full_rl_rainbow>
	chasing_rainbow();
    10be:	0e 94 74 04 	call	0x8e8	; 0x8e8 <chasing_rainbow>
	chasing_rainbow();
    10c2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <chasing_rainbow>
	WS2812_clear();
    10c6:	0e 94 9c 09 	call	0x1338	; 0x1338 <WS2812_clear>
	snake_rgb();
    10ca:	0e 94 b0 06 	call	0xd60	; 0xd60 <snake_rgb>
	snake_rgb();
    10ce:	0e 94 b0 06 	call	0xd60	; 0xd60 <snake_rgb>
	snake_rgb();
    10d2:	0e 94 b0 06 	call	0xd60	; 0xd60 <snake_rgb>
    10d6:	08 95       	ret

000010d8 <WS2812_show>:
			c      = *ptr;
			*ptr++ = (c * scale) >> 8;
		}
		WS2812_brightness = newBrightness;
	}
}
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	27 97       	sbiw	r28, 0x07	; 7
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <WS2812_pixels>
    10ea:	90 91 6d 3c 	lds	r25, 0x3C6D	; 0x803c6d <WS2812_pixels+0x1>
    10ee:	89 2b       	or	r24, r25
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <WS2812_show+0x1c>
    10f2:	54 c0       	rjmp	.+168    	; 0x119c <nextbyte20+0x26>
    10f4:	f8 94       	cli
    10f6:	80 91 70 3c 	lds	r24, 0x3C70	; 0x803c70 <WS2812_numBytes>
    10fa:	90 91 71 3c 	lds	r25, 0x3C71	; 0x803c71 <WS2812_numBytes+0x1>
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	e0 91 6c 3c 	lds	r30, 0x3C6C	; 0x803c6c <WS2812_pixels>
    1106:	f0 91 6d 3c 	lds	r31, 0x3C6D	; 0x803c6d <WS2812_pixels+0x1>
    110a:	df 01       	movw	r26, r30
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	80 81       	ld	r24, Z
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	e0 91 66 3c 	lds	r30, 0x3C66	; 0x803c66 <WS2812_port>
    1116:	f0 91 67 3c 	lds	r31, 0x3C67	; 0x803c67 <WS2812_port+0x1>
    111a:	20 81       	ld	r18, Z
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	00 90 6f 3c 	lds	r0, 0x3C6F	; 0x803c6f <WS2812_pin_bp>
    1124:	02 c0       	rjmp	.+4      	; 0x112a <WS2812_show+0x52>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <WS2812_show+0x4e>
    112e:	92 2f       	mov	r25, r18
    1130:	98 2b       	or	r25, r24
    1132:	9c 83       	std	Y+4, r25	; 0x04
    1134:	90 81       	ld	r25, Z
    1136:	80 95       	com	r24
    1138:	89 23       	and	r24, r25
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	8e 83       	std	Y+6, r24	; 0x06
    1140:	88 e0       	ldi	r24, 0x08	; 8
    1142:	8f 83       	std	Y+7, r24	; 0x07
    1144:	5c 81       	ldd	r21, Y+4	; 0x04
    1146:	6d 81       	ldd	r22, Y+5	; 0x05
    1148:	4b 81       	ldd	r20, Y+3	; 0x03
    114a:	3f 81       	ldd	r19, Y+7	; 0x07
    114c:	2e 81       	ldd	r18, Y+6	; 0x06
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02

00001152 <head20>:
    1152:	50 83       	st	Z, r21
    1154:	47 fd       	sbrc	r20, 7
    1156:	25 2f       	mov	r18, r21
    1158:	3a 95       	dec	r19
    115a:	00 00       	nop
    115c:	00 c0       	rjmp	.+0      	; 0x115e <head20+0xc>
    115e:	20 83       	st	Z, r18
    1160:	26 2f       	mov	r18, r22
    1162:	49 f0       	breq	.+18     	; 0x1176 <nextbyte20>
    1164:	44 1f       	adc	r20, r20
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <head20+0x16>
    1168:	00 c0       	rjmp	.+0      	; 0x116a <head20+0x18>
    116a:	60 83       	st	Z, r22
    116c:	00 00       	nop
    116e:	00 c0       	rjmp	.+0      	; 0x1170 <head20+0x1e>
    1170:	00 c0       	rjmp	.+0      	; 0x1172 <head20+0x20>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <head20+0x22>
    1174:	ee cf       	rjmp	.-36     	; 0x1152 <head20>

00001176 <nextbyte20>:
    1176:	38 e0       	ldi	r19, 0x08	; 8
    1178:	4d 91       	ld	r20, X+
    117a:	00 00       	nop
    117c:	60 83       	st	Z, r22
    117e:	00 00       	nop
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <nextbyte20+0xc>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <nextbyte20+0xe>
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	29 f7       	brne	.-54     	; 0x1152 <head20>
    1188:	e0 93 66 3c 	sts	0x3C66, r30	; 0x803c66 <WS2812_port>
    118c:	f0 93 67 3c 	sts	0x3C67, r31	; 0x803c67 <WS2812_port+0x1>
    1190:	4b 83       	std	Y+3, r20	; 0x03
    1192:	3f 83       	std	Y+7, r19	; 0x07
    1194:	2e 83       	std	Y+6, r18	; 0x06
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	78 94       	sei
    119c:	27 96       	adiw	r28, 0x07	; 7
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <WS2812_set_pixel_color_RGB>:
    11a8:	e0 91 72 3c 	lds	r30, 0x3C72	; 0x803c72 <WS2812_numLEDs>
    11ac:	f0 91 73 3c 	lds	r31, 0x3C73	; 0x803c73 <WS2812_numLEDs+0x1>
    11b0:	8e 17       	cp	r24, r30
    11b2:	9f 07       	cpc	r25, r31
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <WS2812_set_pixel_color_RGB+0x10>
    11b6:	47 c0       	rjmp	.+142    	; 0x1246 <WS2812_set_pixel_color_RGB+0x9e>
    11b8:	e0 91 6e 3c 	lds	r30, 0x3C6E	; 0x803c6e <WS2812_brightness>
    11bc:	ee 23       	and	r30, r30
    11be:	99 f0       	breq	.+38     	; 0x11e6 <WS2812_set_pixel_color_RGB+0x3e>
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	6e 9f       	mul	r22, r30
    11c4:	d0 01       	movw	r26, r0
    11c6:	6f 9f       	mul	r22, r31
    11c8:	b0 0d       	add	r27, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	6b 2f       	mov	r22, r27
    11ce:	4e 9f       	mul	r20, r30
    11d0:	d0 01       	movw	r26, r0
    11d2:	4f 9f       	mul	r20, r31
    11d4:	b0 0d       	add	r27, r0
    11d6:	11 24       	eor	r1, r1
    11d8:	4b 2f       	mov	r20, r27
    11da:	2e 9f       	mul	r18, r30
    11dc:	d0 01       	movw	r26, r0
    11de:	2f 9f       	mul	r18, r31
    11e0:	b0 0d       	add	r27, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	2b 2f       	mov	r18, r27
    11e6:	50 91 68 3c 	lds	r21, 0x3C68	; 0x803c68 <WS2812_wOffset>
    11ea:	30 91 6b 3c 	lds	r19, 0x3C6B	; 0x803c6b <WS2812_rOffset>
    11ee:	53 13       	cpse	r21, r19
    11f0:	0c c0       	rjmp	.+24     	; 0x120a <WS2812_set_pixel_color_RGB+0x62>
    11f2:	fc 01       	movw	r30, r24
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	8e 0f       	add	r24, r30
    11fa:	9f 1f       	adc	r25, r31
    11fc:	e0 91 6c 3c 	lds	r30, 0x3C6C	; 0x803c6c <WS2812_pixels>
    1200:	f0 91 6d 3c 	lds	r31, 0x3C6D	; 0x803c6d <WS2812_pixels+0x1>
    1204:	8e 0f       	add	r24, r30
    1206:	9f 1f       	adc	r25, r31
    1208:	0e c0       	rjmp	.+28     	; 0x1226 <WS2812_set_pixel_color_RGB+0x7e>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	e0 91 6c 3c 	lds	r30, 0x3C6C	; 0x803c6c <WS2812_pixels>
    1216:	f0 91 6d 3c 	lds	r31, 0x3C6D	; 0x803c6d <WS2812_pixels+0x1>
    121a:	8e 0f       	add	r24, r30
    121c:	9f 1f       	adc	r25, r31
    121e:	fc 01       	movw	r30, r24
    1220:	e5 0f       	add	r30, r21
    1222:	f1 1d       	adc	r31, r1
    1224:	10 82       	st	Z, r1
    1226:	fc 01       	movw	r30, r24
    1228:	e3 0f       	add	r30, r19
    122a:	f1 1d       	adc	r31, r1
    122c:	60 83       	st	Z, r22
    122e:	30 91 6a 3c 	lds	r19, 0x3C6A	; 0x803c6a <WS2812_gOffset>
    1232:	fc 01       	movw	r30, r24
    1234:	e3 0f       	add	r30, r19
    1236:	f1 1d       	adc	r31, r1
    1238:	40 83       	st	Z, r20
    123a:	30 91 69 3c 	lds	r19, 0x3C69	; 0x803c69 <WS2812_bOffset>
    123e:	fc 01       	movw	r30, r24
    1240:	e3 0f       	add	r30, r19
    1242:	f1 1d       	adc	r31, r1
    1244:	20 83       	st	Z, r18
    1246:	08 95       	ret

00001248 <WS2812_set_pixel_color_C>:
    1248:	8f 92       	push	r8
    124a:	9f 92       	push	r9
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	20 91 72 3c 	lds	r18, 0x3C72	; 0x803c72 <WS2812_numLEDs>
    1260:	30 91 73 3c 	lds	r19, 0x3C73	; 0x803c73 <WS2812_numLEDs+0x1>
    1264:	82 17       	cp	r24, r18
    1266:	93 07       	cpc	r25, r19
    1268:	08 f0       	brcs	.+2      	; 0x126c <WS2812_set_pixel_color_C+0x24>
    126a:	5b c0       	rjmp	.+182    	; 0x1322 <WS2812_set_pixel_color_C+0xda>
    126c:	4b 01       	movw	r8, r22
    126e:	aa 24       	eor	r10, r10
    1270:	bb 24       	eor	r11, r11
    1272:	b8 2d       	mov	r27, r8
    1274:	c5 2e       	mov	r12, r21
    1276:	d6 2e       	mov	r13, r22
    1278:	e7 2e       	mov	r14, r23
    127a:	ff 24       	eor	r15, r15
    127c:	ac 2d       	mov	r26, r12
    127e:	f4 2f       	mov	r31, r20
    1280:	20 91 6e 3c 	lds	r18, 0x3C6E	; 0x803c6e <WS2812_brightness>
    1284:	22 23       	and	r18, r18
    1286:	99 f0       	breq	.+38     	; 0x12ae <WS2812_set_pixel_color_C+0x66>
    1288:	e2 2f       	mov	r30, r18
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	8e 9e       	mul	r8, r30
    128e:	d0 01       	movw	r26, r0
    1290:	8f 9e       	mul	r8, r31
    1292:	b0 0d       	add	r27, r0
    1294:	11 24       	eor	r1, r1
    1296:	ce 9e       	mul	r12, r30
    1298:	e0 01       	movw	r28, r0
    129a:	cf 9e       	mul	r12, r31
    129c:	d0 0d       	add	r29, r0
    129e:	11 24       	eor	r1, r1
    12a0:	ad 2f       	mov	r26, r29
    12a2:	4e 9f       	mul	r20, r30
    12a4:	e0 01       	movw	r28, r0
    12a6:	4f 9f       	mul	r20, r31
    12a8:	d0 0d       	add	r29, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	fd 2f       	mov	r31, r29
    12ae:	e0 91 68 3c 	lds	r30, 0x3C68	; 0x803c68 <WS2812_wOffset>
    12b2:	30 91 6b 3c 	lds	r19, 0x3C6B	; 0x803c6b <WS2812_rOffset>
    12b6:	e3 13       	cpse	r30, r19
    12b8:	0c c0       	rjmp	.+24     	; 0x12d2 <WS2812_set_pixel_color_C+0x8a>
    12ba:	ac 01       	movw	r20, r24
    12bc:	44 0f       	add	r20, r20
    12be:	55 1f       	adc	r21, r21
    12c0:	84 0f       	add	r24, r20
    12c2:	95 1f       	adc	r25, r21
    12c4:	40 91 6c 3c 	lds	r20, 0x3C6C	; 0x803c6c <WS2812_pixels>
    12c8:	50 91 6d 3c 	lds	r21, 0x3C6D	; 0x803c6d <WS2812_pixels+0x1>
    12cc:	84 0f       	add	r24, r20
    12ce:	95 1f       	adc	r25, r21
    12d0:	18 c0       	rjmp	.+48     	; 0x1302 <WS2812_set_pixel_color_C+0xba>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	c0 91 6c 3c 	lds	r28, 0x3C6C	; 0x803c6c <WS2812_pixels>
    12de:	d0 91 6d 3c 	lds	r29, 0x3C6D	; 0x803c6d <WS2812_pixels+0x1>
    12e2:	8c 0f       	add	r24, r28
    12e4:	9d 1f       	adc	r25, r29
    12e6:	47 2f       	mov	r20, r23
    12e8:	55 27       	eor	r21, r21
    12ea:	66 27       	eor	r22, r22
    12ec:	77 27       	eor	r23, r23
    12ee:	ec 01       	movw	r28, r24
    12f0:	ce 0f       	add	r28, r30
    12f2:	d1 1d       	adc	r29, r1
    12f4:	22 23       	and	r18, r18
    12f6:	21 f0       	breq	.+8      	; 0x1300 <WS2812_set_pixel_color_C+0xb8>
    12f8:	42 9f       	mul	r20, r18
    12fa:	a0 01       	movw	r20, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	45 2f       	mov	r20, r21
    1300:	48 83       	st	Y, r20
    1302:	ec 01       	movw	r28, r24
    1304:	c3 0f       	add	r28, r19
    1306:	d1 1d       	adc	r29, r1
    1308:	b8 83       	st	Y, r27
    130a:	20 91 6a 3c 	lds	r18, 0x3C6A	; 0x803c6a <WS2812_gOffset>
    130e:	ec 01       	movw	r28, r24
    1310:	c2 0f       	add	r28, r18
    1312:	d1 1d       	adc	r29, r1
    1314:	a8 83       	st	Y, r26
    1316:	20 91 69 3c 	lds	r18, 0x3C69	; 0x803c69 <WS2812_bOffset>
    131a:	dc 01       	movw	r26, r24
    131c:	a2 0f       	add	r26, r18
    131e:	b1 1d       	adc	r27, r1
    1320:	fc 93       	st	X, r31
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	9f 90       	pop	r9
    1334:	8f 90       	pop	r8
    1336:	08 95       	ret

00001338 <WS2812_clear>:
	
void WS2812_clear(void) {
	memset(WS2812_pixels, 0,  WS2812_numBytes);
    1338:	40 91 70 3c 	lds	r20, 0x3C70	; 0x803c70 <WS2812_numBytes>
    133c:	50 91 71 3c 	lds	r21, 0x3C71	; 0x803c71 <WS2812_numBytes+0x1>
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <WS2812_pixels>
    1348:	90 91 6d 3c 	lds	r25, 0x3C6D	; 0x803c6d <WS2812_pixels+0x1>
    134c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <memset>
    1350:	08 95       	ret

00001352 <WS2812_set_length>:
}
	
void WS2812_set_length(uint16_t l) {
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	8c 01       	movw	r16, r24
	if (WS2812_pixels) {
    135c:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <WS2812_pixels>
    1360:	90 91 6d 3c 	lds	r25, 0x3C6D	; 0x803c6d <WS2812_pixels+0x1>
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	11 f0       	breq	.+4      	; 0x136c <WS2812_set_length+0x1a>
		free(WS2812_pixels);
    1368:	0e 94 cc 0a 	call	0x1598	; 0x1598 <free>
	}
	
	WS2812_numBytes = l * ((WS2812_wOffset == WS2812_rOffset) ? 3 : 4);
    136c:	90 91 68 3c 	lds	r25, 0x3C68	; 0x803c68 <WS2812_wOffset>
    1370:	80 91 6b 3c 	lds	r24, 0x3C6B	; 0x803c6b <WS2812_rOffset>
    1374:	98 17       	cp	r25, r24
    1376:	19 f0       	breq	.+6      	; 0x137e <WS2812_set_length+0x2c>
    1378:	84 e0       	ldi	r24, 0x04	; 4
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <WS2812_set_length+0x30>
    137e:	83 e0       	ldi	r24, 0x03	; 3
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	80 9f       	mul	r24, r16
    1384:	e0 01       	movw	r28, r0
    1386:	81 9f       	mul	r24, r17
    1388:	d0 0d       	add	r29, r0
    138a:	90 9f       	mul	r25, r16
    138c:	d0 0d       	add	r29, r0
    138e:	11 24       	eor	r1, r1
    1390:	c0 93 70 3c 	sts	0x3C70, r28	; 0x803c70 <WS2812_numBytes>
    1394:	d0 93 71 3c 	sts	0x3C71, r29	; 0x803c71 <WS2812_numBytes+0x1>
	if ((WS2812_pixels = (uint8_t*) malloc(WS2812_numBytes))) {
    1398:	ce 01       	movw	r24, r28
    139a:	0e 94 34 0a 	call	0x1468	; 0x1468 <malloc>
    139e:	80 93 6c 3c 	sts	0x3C6C, r24	; 0x803c6c <WS2812_pixels>
    13a2:	90 93 6d 3c 	sts	0x3C6D, r25	; 0x803c6d <WS2812_pixels+0x1>
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	51 f0       	breq	.+20     	; 0x13be <WS2812_set_length+0x6c>
		memset(WS2812_pixels, 0, WS2812_numBytes);
    13aa:	ae 01       	movw	r20, r28
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <memset>
		WS2812_numLEDs = l;
    13b4:	00 93 72 3c 	sts	0x3C72, r16	; 0x803c72 <WS2812_numLEDs>
    13b8:	10 93 73 3c 	sts	0x3C73, r17	; 0x803c73 <WS2812_numLEDs+0x1>
    13bc:	08 c0       	rjmp	.+16     	; 0x13ce <WS2812_set_length+0x7c>
	} else {
		WS2812_numLEDs = WS2812_numBytes = 0;
    13be:	10 92 70 3c 	sts	0x3C70, r1	; 0x803c70 <WS2812_numBytes>
    13c2:	10 92 71 3c 	sts	0x3C71, r1	; 0x803c71 <WS2812_numBytes+0x1>
    13c6:	10 92 72 3c 	sts	0x3C72, r1	; 0x803c72 <WS2812_numLEDs>
    13ca:	10 92 73 3c 	sts	0x3C73, r1	; 0x803c73 <WS2812_numLEDs+0x1>
	}
}
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <WS2812_set_type>:

void WS2812_set_type(ws2812Type t) {
	uint8_t oldThreeBytesPerPixel = (WS2812_wOffset == WS2812_rOffset); // false if RGBW
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	20 91 68 3c 	lds	r18, 0x3C68	; 0x803c68 <WS2812_wOffset>
    13de:	90 91 6b 3c 	lds	r25, 0x3C6B	; 0x803c6b <WS2812_rOffset>
    13e2:	29 13       	cpse	r18, r25
    13e4:	40 e0       	ldi	r20, 0x00	; 0
	
	WS2812_wOffset = (t >> 6) & 0b11;
    13e6:	38 2f       	mov	r19, r24
    13e8:	32 95       	swap	r19
    13ea:	36 95       	lsr	r19
    13ec:	36 95       	lsr	r19
    13ee:	33 70       	andi	r19, 0x03	; 3
    13f0:	30 93 68 3c 	sts	0x3C68, r19	; 0x803c68 <WS2812_wOffset>
	WS2812_rOffset = (t >> 4) & 0b11;
    13f4:	98 2f       	mov	r25, r24
    13f6:	92 95       	swap	r25
    13f8:	9f 70       	andi	r25, 0x0F	; 15
    13fa:	93 70       	andi	r25, 0x03	; 3
    13fc:	90 93 6b 3c 	sts	0x3C6B, r25	; 0x803c6b <WS2812_rOffset>
	WS2812_gOffset = (t >> 2) & 0b11;
    1400:	28 2f       	mov	r18, r24
    1402:	26 95       	lsr	r18
    1404:	26 95       	lsr	r18
    1406:	23 70       	andi	r18, 0x03	; 3
    1408:	20 93 6a 3c 	sts	0x3C6A, r18	; 0x803c6a <WS2812_gOffset>
	WS2812_bOffset = t & 0b11;
    140c:	83 70       	andi	r24, 0x03	; 3
    140e:	80 93 69 3c 	sts	0x3C69, r24	; 0x803c69 <WS2812_bOffset>
	
	if (WS2812_pixels) {
    1412:	60 91 6c 3c 	lds	r22, 0x3C6C	; 0x803c6c <WS2812_pixels>
    1416:	70 91 6d 3c 	lds	r23, 0x3C6D	; 0x803c6d <WS2812_pixels+0x1>
    141a:	67 2b       	or	r22, r23
    141c:	59 f0       	breq	.+22     	; 0x1434 <WS2812_set_type+0x5c>
		uint8_t newThreeBytesPerPixel = (WS2812_wOffset == WS2812_rOffset);
		if (newThreeBytesPerPixel != oldThreeBytesPerPixel) {
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	39 13       	cpse	r19, r25
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	48 17       	cp	r20, r24
    1426:	31 f0       	breq	.+12     	; 0x1434 <WS2812_set_type+0x5c>
			WS2812_set_length(WS2812_numLEDs);
    1428:	80 91 72 3c 	lds	r24, 0x3C72	; 0x803c72 <WS2812_numLEDs>
    142c:	90 91 73 3c 	lds	r25, 0x3C73	; 0x803c73 <WS2812_numLEDs+0x1>
    1430:	0e 94 a9 09 	call	0x1352	; 0x1352 <WS2812_set_length>
    1434:	08 95       	ret

00001436 <WS2812_init>:
static uint8_t WS2812_bOffset;
static uint8_t WS2812_wOffset;

volatile static uint8_t* WS2812_port;

void WS2812_init(ws2812Type t, uint16_t numLeds, uint8_t* port, uint8_t pin) {
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	7b 01       	movw	r14, r22
    1442:	8a 01       	movw	r16, r20
    1444:	c2 2f       	mov	r28, r18
	WS2812_set_type(t);
    1446:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <WS2812_set_type>
	WS2812_set_length(numLeds);
    144a:	c7 01       	movw	r24, r14
    144c:	0e 94 a9 09 	call	0x1352	; 0x1352 <WS2812_set_length>
	
	ENABLE_INTERRUPTS();
}

void WS2812_set_pin(uint8_t* p, uint8_t bitn) {
	WS2812_port = p;
    1450:	00 93 66 3c 	sts	0x3C66, r16	; 0x803c66 <WS2812_port>
    1454:	10 93 67 3c 	sts	0x3C67, r17	; 0x803c67 <WS2812_port+0x1>
	WS2812_pin_bp = bitn;
    1458:	c0 93 6f 3c 	sts	0x3C6F, r28	; 0x803c6f <WS2812_pin_bp>

void WS2812_init(ws2812Type t, uint16_t numLeds, uint8_t* port, uint8_t pin) {
	WS2812_set_type(t);
	WS2812_set_length(numLeds);
	WS2812_set_pin(port, pin);
}
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	08 95       	ret

00001468 <malloc>:
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	82 30       	cpi	r24, 0x02	; 2
    1472:	91 05       	cpc	r25, r1
    1474:	10 f4       	brcc	.+4      	; 0x147a <malloc+0x12>
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	e0 91 76 3c 	lds	r30, 0x3C76	; 0x803c76 <__flp>
    147e:	f0 91 77 3c 	lds	r31, 0x3C77	; 0x803c77 <__flp+0x1>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	30 97       	sbiw	r30, 0x00	; 0
    148c:	19 f1       	breq	.+70     	; 0x14d4 <malloc+0x6c>
    148e:	40 81       	ld	r20, Z
    1490:	51 81       	ldd	r21, Z+1	; 0x01
    1492:	02 81       	ldd	r16, Z+2	; 0x02
    1494:	13 81       	ldd	r17, Z+3	; 0x03
    1496:	48 17       	cp	r20, r24
    1498:	59 07       	cpc	r21, r25
    149a:	c8 f0       	brcs	.+50     	; 0x14ce <malloc+0x66>
    149c:	84 17       	cp	r24, r20
    149e:	95 07       	cpc	r25, r21
    14a0:	69 f4       	brne	.+26     	; 0x14bc <malloc+0x54>
    14a2:	10 97       	sbiw	r26, 0x00	; 0
    14a4:	31 f0       	breq	.+12     	; 0x14b2 <malloc+0x4a>
    14a6:	12 96       	adiw	r26, 0x02	; 2
    14a8:	0c 93       	st	X, r16
    14aa:	12 97       	sbiw	r26, 0x02	; 2
    14ac:	13 96       	adiw	r26, 0x03	; 3
    14ae:	1c 93       	st	X, r17
    14b0:	27 c0       	rjmp	.+78     	; 0x1500 <malloc+0x98>
    14b2:	00 93 76 3c 	sts	0x3C76, r16	; 0x803c76 <__flp>
    14b6:	10 93 77 3c 	sts	0x3C77, r17	; 0x803c77 <__flp+0x1>
    14ba:	22 c0       	rjmp	.+68     	; 0x1500 <malloc+0x98>
    14bc:	21 15       	cp	r18, r1
    14be:	31 05       	cpc	r19, r1
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <malloc+0x60>
    14c2:	42 17       	cp	r20, r18
    14c4:	53 07       	cpc	r21, r19
    14c6:	18 f4       	brcc	.+6      	; 0x14ce <malloc+0x66>
    14c8:	9a 01       	movw	r18, r20
    14ca:	bd 01       	movw	r22, r26
    14cc:	ef 01       	movw	r28, r30
    14ce:	df 01       	movw	r26, r30
    14d0:	f8 01       	movw	r30, r16
    14d2:	db cf       	rjmp	.-74     	; 0x148a <malloc+0x22>
    14d4:	21 15       	cp	r18, r1
    14d6:	31 05       	cpc	r19, r1
    14d8:	f9 f0       	breq	.+62     	; 0x1518 <malloc+0xb0>
    14da:	28 1b       	sub	r18, r24
    14dc:	39 0b       	sbc	r19, r25
    14de:	24 30       	cpi	r18, 0x04	; 4
    14e0:	31 05       	cpc	r19, r1
    14e2:	80 f4       	brcc	.+32     	; 0x1504 <malloc+0x9c>
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	9b 81       	ldd	r25, Y+3	; 0x03
    14e8:	61 15       	cp	r22, r1
    14ea:	71 05       	cpc	r23, r1
    14ec:	21 f0       	breq	.+8      	; 0x14f6 <malloc+0x8e>
    14ee:	fb 01       	movw	r30, r22
    14f0:	82 83       	std	Z+2, r24	; 0x02
    14f2:	93 83       	std	Z+3, r25	; 0x03
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <malloc+0x96>
    14f6:	80 93 76 3c 	sts	0x3C76, r24	; 0x803c76 <__flp>
    14fa:	90 93 77 3c 	sts	0x3C77, r25	; 0x803c77 <__flp+0x1>
    14fe:	fe 01       	movw	r30, r28
    1500:	32 96       	adiw	r30, 0x02	; 2
    1502:	44 c0       	rjmp	.+136    	; 0x158c <malloc+0x124>
    1504:	fe 01       	movw	r30, r28
    1506:	e2 0f       	add	r30, r18
    1508:	f3 1f       	adc	r31, r19
    150a:	81 93       	st	Z+, r24
    150c:	91 93       	st	Z+, r25
    150e:	22 50       	subi	r18, 0x02	; 2
    1510:	31 09       	sbc	r19, r1
    1512:	28 83       	st	Y, r18
    1514:	39 83       	std	Y+1, r19	; 0x01
    1516:	3a c0       	rjmp	.+116    	; 0x158c <malloc+0x124>
    1518:	20 91 74 3c 	lds	r18, 0x3C74	; 0x803c74 <__brkval>
    151c:	30 91 75 3c 	lds	r19, 0x3C75	; 0x803c75 <__brkval+0x1>
    1520:	23 2b       	or	r18, r19
    1522:	41 f4       	brne	.+16     	; 0x1534 <malloc+0xcc>
    1524:	20 91 02 3c 	lds	r18, 0x3C02	; 0x803c02 <__malloc_heap_start>
    1528:	30 91 03 3c 	lds	r19, 0x3C03	; 0x803c03 <__malloc_heap_start+0x1>
    152c:	20 93 74 3c 	sts	0x3C74, r18	; 0x803c74 <__brkval>
    1530:	30 93 75 3c 	sts	0x3C75, r19	; 0x803c75 <__brkval+0x1>
    1534:	20 91 00 3c 	lds	r18, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
    1538:	30 91 01 3c 	lds	r19, 0x3C01	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
    153c:	21 15       	cp	r18, r1
    153e:	31 05       	cpc	r19, r1
    1540:	41 f4       	brne	.+16     	; 0x1552 <malloc+0xea>
    1542:	2d b7       	in	r18, 0x3d	; 61
    1544:	3e b7       	in	r19, 0x3e	; 62
    1546:	40 91 04 3c 	lds	r20, 0x3C04	; 0x803c04 <__malloc_margin>
    154a:	50 91 05 3c 	lds	r21, 0x3C05	; 0x803c05 <__malloc_margin+0x1>
    154e:	24 1b       	sub	r18, r20
    1550:	35 0b       	sbc	r19, r21
    1552:	e0 91 74 3c 	lds	r30, 0x3C74	; 0x803c74 <__brkval>
    1556:	f0 91 75 3c 	lds	r31, 0x3C75	; 0x803c75 <__brkval+0x1>
    155a:	e2 17       	cp	r30, r18
    155c:	f3 07       	cpc	r31, r19
    155e:	a0 f4       	brcc	.+40     	; 0x1588 <malloc+0x120>
    1560:	2e 1b       	sub	r18, r30
    1562:	3f 0b       	sbc	r19, r31
    1564:	28 17       	cp	r18, r24
    1566:	39 07       	cpc	r19, r25
    1568:	78 f0       	brcs	.+30     	; 0x1588 <malloc+0x120>
    156a:	ac 01       	movw	r20, r24
    156c:	4e 5f       	subi	r20, 0xFE	; 254
    156e:	5f 4f       	sbci	r21, 0xFF	; 255
    1570:	24 17       	cp	r18, r20
    1572:	35 07       	cpc	r19, r21
    1574:	48 f0       	brcs	.+18     	; 0x1588 <malloc+0x120>
    1576:	4e 0f       	add	r20, r30
    1578:	5f 1f       	adc	r21, r31
    157a:	40 93 74 3c 	sts	0x3C74, r20	; 0x803c74 <__brkval>
    157e:	50 93 75 3c 	sts	0x3C75, r21	; 0x803c75 <__brkval+0x1>
    1582:	81 93       	st	Z+, r24
    1584:	91 93       	st	Z+, r25
    1586:	02 c0       	rjmp	.+4      	; 0x158c <malloc+0x124>
    1588:	e0 e0       	ldi	r30, 0x00	; 0
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	cf 01       	movw	r24, r30
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	08 95       	ret

00001598 <free>:
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	09 f4       	brne	.+2      	; 0x15a2 <free+0xa>
    15a0:	81 c0       	rjmp	.+258    	; 0x16a4 <free+0x10c>
    15a2:	fc 01       	movw	r30, r24
    15a4:	32 97       	sbiw	r30, 0x02	; 2
    15a6:	12 82       	std	Z+2, r1	; 0x02
    15a8:	13 82       	std	Z+3, r1	; 0x03
    15aa:	a0 91 76 3c 	lds	r26, 0x3C76	; 0x803c76 <__flp>
    15ae:	b0 91 77 3c 	lds	r27, 0x3C77	; 0x803c77 <__flp+0x1>
    15b2:	10 97       	sbiw	r26, 0x00	; 0
    15b4:	81 f4       	brne	.+32     	; 0x15d6 <free+0x3e>
    15b6:	20 81       	ld	r18, Z
    15b8:	31 81       	ldd	r19, Z+1	; 0x01
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	20 91 74 3c 	lds	r18, 0x3C74	; 0x803c74 <__brkval>
    15c2:	30 91 75 3c 	lds	r19, 0x3C75	; 0x803c75 <__brkval+0x1>
    15c6:	28 17       	cp	r18, r24
    15c8:	39 07       	cpc	r19, r25
    15ca:	51 f5       	brne	.+84     	; 0x1620 <free+0x88>
    15cc:	e0 93 74 3c 	sts	0x3C74, r30	; 0x803c74 <__brkval>
    15d0:	f0 93 75 3c 	sts	0x3C75, r31	; 0x803c75 <__brkval+0x1>
    15d4:	67 c0       	rjmp	.+206    	; 0x16a4 <free+0x10c>
    15d6:	ed 01       	movw	r28, r26
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	ce 17       	cp	r28, r30
    15de:	df 07       	cpc	r29, r31
    15e0:	40 f4       	brcc	.+16     	; 0x15f2 <free+0x5a>
    15e2:	4a 81       	ldd	r20, Y+2	; 0x02
    15e4:	5b 81       	ldd	r21, Y+3	; 0x03
    15e6:	9e 01       	movw	r18, r28
    15e8:	41 15       	cp	r20, r1
    15ea:	51 05       	cpc	r21, r1
    15ec:	f1 f0       	breq	.+60     	; 0x162a <free+0x92>
    15ee:	ea 01       	movw	r28, r20
    15f0:	f5 cf       	rjmp	.-22     	; 0x15dc <free+0x44>
    15f2:	c2 83       	std	Z+2, r28	; 0x02
    15f4:	d3 83       	std	Z+3, r29	; 0x03
    15f6:	40 81       	ld	r20, Z
    15f8:	51 81       	ldd	r21, Z+1	; 0x01
    15fa:	84 0f       	add	r24, r20
    15fc:	95 1f       	adc	r25, r21
    15fe:	c8 17       	cp	r28, r24
    1600:	d9 07       	cpc	r29, r25
    1602:	59 f4       	brne	.+22     	; 0x161a <free+0x82>
    1604:	88 81       	ld	r24, Y
    1606:	99 81       	ldd	r25, Y+1	; 0x01
    1608:	84 0f       	add	r24, r20
    160a:	95 1f       	adc	r25, r21
    160c:	02 96       	adiw	r24, 0x02	; 2
    160e:	80 83       	st	Z, r24
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	9b 81       	ldd	r25, Y+3	; 0x03
    1616:	82 83       	std	Z+2, r24	; 0x02
    1618:	93 83       	std	Z+3, r25	; 0x03
    161a:	21 15       	cp	r18, r1
    161c:	31 05       	cpc	r19, r1
    161e:	29 f4       	brne	.+10     	; 0x162a <free+0x92>
    1620:	e0 93 76 3c 	sts	0x3C76, r30	; 0x803c76 <__flp>
    1624:	f0 93 77 3c 	sts	0x3C77, r31	; 0x803c77 <__flp+0x1>
    1628:	3d c0       	rjmp	.+122    	; 0x16a4 <free+0x10c>
    162a:	e9 01       	movw	r28, r18
    162c:	ea 83       	std	Y+2, r30	; 0x02
    162e:	fb 83       	std	Y+3, r31	; 0x03
    1630:	49 91       	ld	r20, Y+
    1632:	59 91       	ld	r21, Y+
    1634:	c4 0f       	add	r28, r20
    1636:	d5 1f       	adc	r29, r21
    1638:	ec 17       	cp	r30, r28
    163a:	fd 07       	cpc	r31, r29
    163c:	61 f4       	brne	.+24     	; 0x1656 <free+0xbe>
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	84 0f       	add	r24, r20
    1644:	95 1f       	adc	r25, r21
    1646:	02 96       	adiw	r24, 0x02	; 2
    1648:	e9 01       	movw	r28, r18
    164a:	88 83       	st	Y, r24
    164c:	99 83       	std	Y+1, r25	; 0x01
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	9b 83       	std	Y+3, r25	; 0x03
    1656:	e0 e0       	ldi	r30, 0x00	; 0
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	12 96       	adiw	r26, 0x02	; 2
    165c:	8d 91       	ld	r24, X+
    165e:	9c 91       	ld	r25, X
    1660:	13 97       	sbiw	r26, 0x03	; 3
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	19 f0       	breq	.+6      	; 0x166c <free+0xd4>
    1666:	fd 01       	movw	r30, r26
    1668:	dc 01       	movw	r26, r24
    166a:	f7 cf       	rjmp	.-18     	; 0x165a <free+0xc2>
    166c:	8d 91       	ld	r24, X+
    166e:	9c 91       	ld	r25, X
    1670:	11 97       	sbiw	r26, 0x01	; 1
    1672:	9d 01       	movw	r18, r26
    1674:	2e 5f       	subi	r18, 0xFE	; 254
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
    1678:	82 0f       	add	r24, r18
    167a:	93 1f       	adc	r25, r19
    167c:	20 91 74 3c 	lds	r18, 0x3C74	; 0x803c74 <__brkval>
    1680:	30 91 75 3c 	lds	r19, 0x3C75	; 0x803c75 <__brkval+0x1>
    1684:	28 17       	cp	r18, r24
    1686:	39 07       	cpc	r19, r25
    1688:	69 f4       	brne	.+26     	; 0x16a4 <free+0x10c>
    168a:	30 97       	sbiw	r30, 0x00	; 0
    168c:	29 f4       	brne	.+10     	; 0x1698 <free+0x100>
    168e:	10 92 76 3c 	sts	0x3C76, r1	; 0x803c76 <__flp>
    1692:	10 92 77 3c 	sts	0x3C77, r1	; 0x803c77 <__flp+0x1>
    1696:	02 c0       	rjmp	.+4      	; 0x169c <free+0x104>
    1698:	12 82       	std	Z+2, r1	; 0x02
    169a:	13 82       	std	Z+3, r1	; 0x03
    169c:	a0 93 74 3c 	sts	0x3C74, r26	; 0x803c74 <__brkval>
    16a0:	b0 93 75 3c 	sts	0x3C75, r27	; 0x803c75 <__brkval+0x1>
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <memset>:
    16aa:	dc 01       	movw	r26, r24
    16ac:	01 c0       	rjmp	.+2      	; 0x16b0 <memset+0x6>
    16ae:	6d 93       	st	X+, r22
    16b0:	41 50       	subi	r20, 0x01	; 1
    16b2:	50 40       	sbci	r21, 0x00	; 0
    16b4:	e0 f7       	brcc	.-8      	; 0x16ae <memset+0x4>
    16b6:	08 95       	ret

000016b8 <_exit>:
    16b8:	f8 94       	cli

000016ba <__stop_program>:
    16ba:	ff cf       	rjmp	.-2      	; 0x16ba <__stop_program>
